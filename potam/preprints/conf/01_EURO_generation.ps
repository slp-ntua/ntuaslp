%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: nlgblc.dvi
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Bold Times-Italic Times-Roman Courier
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter nlgblc.dvi -o
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.04.16:1333
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

 userdict begin /bop-hook{gsave 210 750 translate -0 rotate 0.5 setlinewidth
0.25 setgray /Times-Roman findfont 10 scalefont setfont newpath 0 0
moveto (Proc. of European Speech Processing Conference, Aalborg, Denmark, Sept. 2001.)
true charpath stroke grestore}def end
 
@fedspecial end TeXDict begin
40258431 52099146 1000 600 600 (nlgblc.dvi) @start /Fa
107[37 26[29 1[44 29 33 18 26 26 33 33 33 33 48 18 29
1[18 33 33 18 29 33 29 1[33 9[55 1[48 37 33 41 1[41 48
44 55 37 44 29 22 48 48 41 41 48 44 41 41 1[33 5[33 33
33 33 33 33 33 33 33 33 1[17 22 17 2[22 22 22 39[{
TeXBase1Encoding ReEncodeFont}61 66.4176 /Times-Italic
rf /Fb 136[48 2[22 26 3[33 37 55 18 37 3[33 1[29 37 29
33[48 65[{TeXBase1Encoding ReEncodeFont}13 66.4176 /Times-Bold
rf /Fc 134[29 1[42 29 1[16 23 19 2[29 29 45 16 29 1[16
29 29 19 26 29 2[26 7[42 4[36 1[39 2[42 42 52 3[19 2[32
36 1[39 39 7[16 1[29 29 2[29 29 29 29 29 44[32 3[{
TeXBase1Encoding ReEncodeFont}38 58.1154 /Times-Roman
rf
%DVIPSBitmapFont: Fd cmmi7 7 3
/Fd 3 63 df<1238127C12FEA3127C123807077A8614>58 D<160E163E16FEED03F8ED0F
E0ED3F80EDFE00EC03F8EC0FE0EC3F8002FEC7FCEB03F8EB0FE0EB3F8001FEC8FCEA03F8
EA0FE0EA3F8000FEC9FC12F812FEEA3F80EA0FE0EA03F8EA00FEEB3F80EB0FE0EB03F8EB
00FEEC3F80EC0FE0EC03F8EC00FEED3F80ED0FE0ED03F8ED00FE163E160E27277AA134>
60 D<12E012F812FEEA3F80EA0FE0EA03F8EA00FEEB3F80EB0FE0EB03F8EB00FEEC3F80
EC0FE0EC03F8EC00FEED3F80ED0FE0ED03F8ED00FE163E16FEED03F8ED0FE0ED3F80EDFE
00EC03F8EC0FE0EC3F8002FEC7FCEB03F8EB0FE0EB3F8001FEC8FCEA03F8EA0FE0EA3F80
00FEC9FC12F812E027277AA134>62 D E
%EndDVIPSBitmapFont
/Fe 136[42 2[19 23 26 1[32 29 32 48 16 2[16 32 29 1[26
2[32 29 38[19 12[19 45[{TeXBase1Encoding ReEncodeFont}17
58.1154 /Times-Bold rf /Ff 206[25 49[{TeXBase1Encoding ReEncodeFont}1
49.8132 /Times-Roman rf
%DVIPSBitmapFont: Fg cmsy6 6 1
/Fg 1 1 df<B712C0A322037A8D30>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmmi6 6 1
/Fh 1 111 df<000F13FC381FC3FF3931C707803861EC0301F813C0EAC1F0A213E03903
C00780A3EC0F00EA0780A2EC1E041506D80F00130C143C15181538001EEB1C70EC1FE000
0CEB07801F177D9526>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmr6 6 2
/Fi 2 50 df<13FF000313C0380781E0380F00F0001E137848133CA248131EA400F8131F
AD0078131EA2007C133E003C133CA26C13786C13F0380781E03803FFC0C6130018227DA0
1E>48 D<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr9 9 3
/Fj 3 62 df<14C01301EB0380EB0F00130E5B133C5B5BA2485A485AA212075B120F90C7
FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E121FA27E7F12077F1203A2
6C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E>40
D<12C07E1270123C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E13
1FA37F1480A5EB07C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A48
5AA2485A48C7FC120E5A123C12705A5A124A7CB71E>I<007FB812C0B912E0A26C17C0CC
FCAC007FB812C0B912E0A26C17C033147C9C3C>61 D E
%EndDVIPSBitmapFont
/Fk 139[21 5[37 1[21 2[21 37 2[33 2[37 37 97[{
TeXBase1Encoding ReEncodeFont}8 74.7198 /Times-Italic
rf /Fl 138[42 25 29 3[37 42 1[21 2[21 1[37 1[33 42 33
42 37 13[42 54 4[71 50 23[37 1[37 37 2[19 25 45[{
TeXBase1Encoding ReEncodeFont}22 74.7198 /Times-Bold
rf
%DVIPSBitmapFont: Fm cmmi8 8 2
/Fm 2 63 df<EE01C01607161FEE7F00ED01FCED07F0ED1FC0037FC7FCEC01FCEC07F0EC
0FC0023FC8FC14FCEB03F8EB0FE0EB3F8001FEC9FCEA03F8EA0FE0EA3F8000FECAFC12F8
12FEEA3F80EA0FE0EA03F8EA00FEEB3F80EB0FE0EB03F8EB00FC143FEC0FC0EC07F0EC01
FCEC007FED1FC0ED07F0ED01FCED007FEE1FC0160716012A2B7AA537>60
D<12E012F812FEEA3F80EA0FE0EA03F8EA00FEEB3F80EB0FE0EB03F8EB00FC143FEC0FC0
EC07F0EC01FCEC007FED1FC0ED07F0ED01FCED007FEE1FC01607161FEE7F00ED01FCED07
F0ED1FC0037FC7FCEC01FCEC07F0EC0FC0023FC8FC14FCEB03F8EB0FE0EB3F8001FEC9FC
EA03F8EA0FE0EA3F8000FECAFC12F812E02A2B7AA537>62 D E
%EndDVIPSBitmapFont
/Fn 107[29 29 24[29 33 33 48 33 33 18 26 22 1[33 33 33
52 18 33 18 18 33 33 22 29 33 29 33 29 22 2[22 1[22 1[48
1[63 48 48 41 37 44 1[37 48 48 59 41 48 26 22 48 48 37
41 48 44 44 48 6[18 33 33 33 33 33 33 33 33 33 33 1[17
22 17 2[22 22 22 52 34[37 37 2[{TeXBase1Encoding ReEncodeFont}73
66.4176 /Times-Roman rf
%DVIPSBitmapFont: Fo cmmi9 9 7
/Fo 7 111 df<171C177EEE01FEEE07FCEE1FF0EE7FC0923801FF00ED07FCED1FF0ED7F
C04A48C7FCEC07FCEC1FF0EC7FC04948C8FCEB07FCEB1FF0EB7FC04848C9FCEA07FCEA1F
F0EA7FC048CAFCA2EA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF903800
7FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FC
EE01FEEE007E171C2F2E7AA93C>60 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF3800
7FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FC
ED01FF9238007FC0EE1FF0EE07FCEE01FEA2EE07FCEE1FF0EE7FC0923801FF00ED07FCED
1FF0ED7FC04A48C7FCEC07FCEC1FF0EC7FC04948C8FCEB07FCEB1FF0EB7FC04848C9FCEA
07FCEA1FF0EA7FC048CAFC12FC12702F2E7AA93C>62 D<010FB512F0A39026003FE0C7FC
5DA25DA2147FA292C8FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25C170C
011F151C17185C1738013F153017705C17E0137F160191C7EA03C0160749EC0F80161F49
147F0001913803FF00B8FCA25E2E337DB234>76 D<90260FFFE049B5FCA281D9001F9138
000FE04A6CEC07801900DA33FC1406A2DA71FE140E180C146081DAE07F141C701318ECC0
3F82010116386F6C133014806F7E010316706F6C136014001503496E13E003015C010680
1500010EECFF0160010CEC7F81A2011CEC3FC395C7FC0118EC1FE3A20138EC0FF717F601
30140717FE017014035F01601401A213E0705A1201D807F01578B57E1730A240337DB23D
>78 D<010FB612F017FE83903B003FC0007FC0EF1FE0EF07F05DEF03F8147FA292C713FC
A25CEF07F85CA2010116F0170F4A15E0EF1FC00103ED3F80EF7F004A14FEEE03FC0107EC
1FF091B612C04CC7FC02F0C9FC130FA25CA2131FA25CA2133FA25CA2137FA291CAFCA25B
A25B1201B512FCA336337DB231>80 D<010FB67E17F817FE903A003FC001FF9338003FC0
EF1FE04B130FEF07F0147FA292C713F8A25CEF0FF05CA20101ED1FE018C04AEC3F801800
0103157E4C5A4AEB07F0EE3FC049B500FEC7FC16F89138F0007E82010F6E7E707E5C8313
1FA25CA2013F141FA25CA2017F143F5F91C7FC180649160E180C49161C00011718B500FC
011F133893380FE070040713E0C93803FFC09338007F0037357DB23A>82
D<D801E013FE3A07F803FF803A0E3E0F07E0001C90383C03F039181F7001003813E02630
3FC07F12700060138014001503D8E07F5CEA407E1200150701FE5C5B150F5E120149131F
EE8080EE81C00003023F13804914011603037F13000007147E495CED3E0E5E000FEC1E38
49EB0FF0D80380EB03C02A227EA02E>110 D E
%EndDVIPSBitmapFont
/Fp 104[75 2[33 33 24[33 37 37 54 37 37 21 29 25 37 37
37 37 58 21 37 21 21 37 37 25 33 37 33 37 33 25 2[25
1[25 1[54 1[71 54 54 46 42 50 54 42 54 54 66 46 54 1[25
54 54 42 46 54 50 50 54 5[21 21 37 37 37 37 37 37 37
37 37 37 21 19 25 19 2[25 25 25 58 34[42 42 2[{
TeXBase1Encoding ReEncodeFont}77 74.7198 /Times-Roman
rf /Fq 133[44 50 1[72 50 55 33 39 44 1[55 50 55 83 28
2[28 2[33 44 55 44 55 50 11[72 1[55 72 1[61 78 5[39 4[72
72 1[72 8[50 50 50 50 50 50 50 50 2[25 46[{
TeXBase1Encoding ReEncodeFont}38 99.6264 /Times-Bold
rf /Fr 134[45 1[45 45 45 45 45 45 1[45 45 45 45 45 45
1[45 45 45 45 45 45 45 45 45 7[45 1[45 45 1[45 1[45 1[45
45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4[45
2[45 4[45 1[45 1[45 45 45 4[45 39[{TeXBase1Encoding ReEncodeFont}53
74.7198 /Courier rf
%DVIPSBitmapFont: Fs cmsy9 9 3
/Fs 3 104 df<EB1FC0EBFFF8487F000713FF390FF07F80391F800FC0393F0007E0003E
130348EB01F0A248EB00F8A2481478A56C14F8A2007CEB01F0A26CEB03E0003F1307391F
800FC0390FF07F806CB51200000113FC6C5BEB1FC01D1D7CA126>14
D<EC07E0143FECFE00EB03F8495A495A5C131F5CB3A5133F91C7FC137E5BEA03F8EA7FE0
48C8FCEA7FE0EA03F8C67E137E7F80131FB3A580130F806D7E6D7EEB00FEEC3FE014071B
4B7BB726>102 D<12FCEAFFC0EA07F0EA01FC6C7E137F7F80131FB3A580130F6D7E6D7E
EB01FC9038007FC0EC1FE0EC7FC0903801FC00EB03F0495A495A131F5CB3A5133F91C7FC
5B13FE485AEA07F0EAFFC000FCC8FC1B4B7BB726>I E
%EndDVIPSBitmapFont
/Ft 134[50 1[72 1[50 28 39 33 1[50 50 50 78 28 2[28 50
50 1[44 1[44 50 44 11[72 61 55 66 3[72 1[61 1[39 5[72
1[66 72 20[25 2[33 33 40[{TeXBase1Encoding ReEncodeFont}31
99.6264 /Times-Roman rf /Fu 134[44 44 2[50 28 39 39 2[50
50 72 28 2[28 50 2[44 50 44 1[50 16[61 2[83 55 4[72 61
61 3[61 19[33 25 44[{TeXBase1Encoding ReEncodeFont}25
99.6264 /Times-Italic rf /Fv 134[60 3[66 40 47 53 1[66
60 66 100 33 66 1[33 1[60 40 53 66 1[66 60 13[66 4[86
1[80 3[93 93 2[86 68[{TeXBase1Encoding ReEncodeFont}24
119.552 /Times-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 161 242 a Fv(Hybrid)31 b(Natural)g(Language)e(Generation)i(f)m
(or)f(Spok)o(en)h(Dialogue)g(Systems)622 464 y Fu(Mic)o(hel)24
b(Galle)m(y)-5 b(,)24 b(Eric)h(F)-10 b(osler)n(-Lussier)f(,)23
b(and)h(Ale)n(xandr)l(os)f(P)-8 b(otamianos)1084 685
y Ft(Dialogue)24 b(Systems)g(Research)i(Department)856
795 y(Bell)f(Labs,)f(Lucent)h(T)-7 b(echnologies,)23
b(Ne)n(w)i(Jerse)o(y)f(\(USA\))908 906 y Fs(f)p Fr(galley,fosler,potam)
p Fs(g)p Fr(@research.bell-labs.com)640 1217 y Fq(Abstract)-120
1336 y Fp(The)i(natural)h(language)h(generation)g(component)g(of)f
(most)f(dialogue)-120 1423 y(systems)e(is)g(based)g(on)g(templates.)38
b(T)-5 b(emplate-based)25 b(generators)g(are)-120 1510
y(hard)34 b(to)f(maintain)g(and)h(reuse,)j(and)c(the)g(sentences)i(the)
o(y)e(produce)-120 1597 y(lack)g(the)g(v)n(ariability)g(and)h(rob)o
(ustness)f(needed)i(by)e(con)m(v)o(ersational)-120 1683
y(systems.)70 b(In)34 b(this)g(paper)m(,)39 b(we)34 b(propose)h(a)g
(\003e)o(xible)f(and)h(domain-)-120 1770 y(independent)i(natural)f
(language)g(generator)g(for)g(spok)o(en)g(dialogue)-120
1857 y(systems)24 b(which)h(combines)g(\002x)o(ed)f(surf)o(ace)h(e)o
(xpressions)g(with)f(freely)-120 1944 y(generated)h(te)o(xt.)37
b(The)24 b(generation)h(algorithm)f(follo)n(ws)f(a)h(hybrid)g(ap-)-120
2030 y(proach,)31 b(combining)f(\002nite)e(state)g(machine)h(\(FSM\))e
(grammars)i(and)-120 2117 y(corpus-based)37 b(language)g(models.)73
b(In)36 b(this)f(approach,)41 b(the)35 b(FSM)-120 2204
y(grammar)16 b(\(a)g(re)n(v)o(ersible)f(parser)h(grammar\))g(is)g
(constrained)g(by)g(a)g(w)o(ord)-120 2291 y(and)25 b(concept)g
Fo(n)p Fp(-gram)g(that)f(tak)o(es)h(terminals)f(and)h(non-terminal)g
(co-)-120 2377 y(occurrences)g(into)e(account.)38 b(The)24
b Fo(n)p Fp(-gram)g(grammar)g(helps)g(pre)n(v)o(ent)-120
2464 y(inappropriate)17 b(deri)n(v)n(ations,)h(therefore)e(impro)o
(ving)i(the)e(quality)g(of)g(the)-120 2551 y(generated)23
b(te)o(xts.)31 b(Furthermore,)22 b(the)f(proposed)j(algorithm)d(achie)n
(v)o(es)-120 2638 y(f)o(aster)15 b(than)h(real-time)e(performance)i
(because)h(of)e(the)g(limited)f(number)-120 2724 y(of)19
b(deri)n(v)n(ations.)487 2922 y Fq(1.)60 b(Intr)n(oduction)-120
3052 y Fp(Natural)22 b(language)h(generation)g(\(NLG\))e(has)h(been)h
(e)o(xtensi)n(v)o(ely)f(stud-)-120 3139 y(ied)30 b(for)g
(`single-interaction')g(systems,)j(e.g.,)f(summarizers,)h(trans-)-120
3225 y(lators,)f(and)e(report)f(generators,)k(b)o(ut)c(little)f(is)i
(kno)n(wn)g(about)g(ef)n(fec-)-120 3312 y(ti)n(v)o(e)20
b(w)o(ays)g(of)g(performing)g(NLG)f(in)h(dialogue)h(systems.)26
b(Current)19 b(ap-)-120 3399 y(proaches)i(to)f(NLG)f(ha)o(v)o(e)h
(limited)f(success)i(when)f(applied)h(to)e(con)m(v)o(er)o(-)-120
3486 y(sational)h(systems.)26 b(The)20 b(naturalness)h(and)f(percei)n
(v)o(ed)h(intelligence)g(of)-120 3572 y(a)f(spok)o(en)j(dialogue)e
(interf)o(ace)g(depends)i(hea)o(vily)d(on)h(the)g(qualities)g(of)-120
3659 y(the)16 b(natural)g(language)i(generation)f(module.)23
b(The)16 b(language)h(use)f(must)-120 3746 y(be)21 b(e)o(xtensi)n(v)o
(e)g(and)g(v)n(aried)g([13)q(].)28 b(In)20 b(addition,)h(the)g(NLG)f
(module)h(has)-120 3833 y(to)d(be)h(rob)o(ust)f(against)g(missing)g
(and)h(incomplete)g(data)g([6],)f(a)g(problem)-120 3919
y(that)i(occurs)h(often)f(in)g(spok)o(en)i(dialogue)f(systems.)28
b(Another)20 b(require-)-120 4006 y(ment)h(in)g(spok)o(en)i(dialogue)f
(systems)g(is)f(real-time)f(performance;)j(the)-120 4093
y(NLG)18 b(module)i(should)g(operate)g(in)e(a)h(fraction)g(of)g(real)g
(time.)5 4180 y(T)-5 b(emplate-based)33 b(systems)g(require)f(little)g
(linguistic)g(e)o(xpertise)-120 4266 y(and)27 b(are)g(cost-ef)n(fecti)n
(v)o(e)g(solutions)g(to)g(NLG)f(in)g(the)h(early)g(stages)g(of)-120
4353 y(prototyping.)55 b(Ho)n(we)n(v)o(er)m(,)32 b(templates)d(tend)h
(to)f(become)h(unmanage-)-120 4440 y(able)18 b(as)f(the)g(system)h(gro)
n(ws,)g(since)g(the)f(number)h(of)g(templates)f(needed)-120
4527 y(to)28 b(co)o(v)o(er)h(all)e(situations)i(while)f(maintaining)h
(a)f(reasonable)h(quality)-120 4613 y(can)24 b(become)h(quite)f(lar)o
(ge.)37 b(In)23 b(addition,)i(templates)f(are)g(application)-120
4700 y(speci\002c)16 b(and)i(ha)o(v)o(e)e(to)g(be)h(re)n(written)f
(when)h(switching)g(to)f(a)h(ne)n(w)f(appli-)-120 4787
y(cation)24 b(domain.)38 b(Other)24 b(problems)g(that)g(template-based)
g(NLG)f(sys-)-120 4874 y(tems)18 b(f)o(ace)h(include)g(an)g(o)o(v)o
(erly)g(restricti)n(v)o(e)f(use)h(of)f(language)i(that)e(lim-)-120
4960 y(its)g(v)n(ariability)g(in)h(the)f(generated)i(te)o(xt,)e(and)h
(vulnerability)g(to)f(missing)-120 5047 y(data,)30 b(since)e(the)o(y)g
(merely)h(rely)e(on)i(slot-\002lling)e(techniques.)51
b(Ov)o(er)o(-)-120 5134 y(all,)19 b(the)h(time)f(and)h(ener)o(gy)g
(needed)h(to)f(achie)n(v)o(e)g(a)g(reasonable)g(quality)-5
b(,)-120 5221 y(v)n(ariety)g(,)30 b(and)f(rob)o(ustness)f(using)h
(templates)f(is)f(v)o(ery)i(high)f(for)g(lar)o(ge)-120
5308 y(applications.)5 5394 y(General-purpose)75 b(rule-based)f
(generation)h(systems)e(lik)o(e)-120 5481 y(FUF/SURGE)41
b([5)q(])i(and)i(KPML)e([3)q(])g(sidestep)i(these)f(problems,)-120
5568 y(of)n(fering)38 b(a)g(broad)g(co)o(v)o(erage)h(of)f(English,)k(b)
o(ut)37 b(because)i(of)f(their)2006 1217 y(generality)-5
b(,)24 b(sophistication,)g(and)f(their)f(need)i(for)e(a)h(lar)o(ge)f
(amount)i(of)2006 1304 y(linguistic)c(kno)n(wledge,)i(such)f(systems)g
(tend)g(to)f(be)h(dif)n(\002cult)f(to)g(adapt)2006 1391
y(to)31 b(task-oriented)i(applications.)62 b(In)32 b(addition,)j
(typical)d(rule-based)2006 1477 y(generators)49 b(do)g(not)g(achie)n(v)
o(e)g(real-time)f(performance)i(and)f(are)2006 1564 y(unsuitable)20
b(for)f(dialogue)h(systems)f([9,)g(13].)2131 1660 y(Recently)-5
b(,)24 b(attempts)g(ha)o(v)o(e)g(been)g(made)g(to)g(o)o(v)o(ercome)g
(the)g(prob-)2006 1746 y(lems)i(of)g(both)g(template-based)h(and)f
(rule-based)h(systems)f(by)h(intro-)2006 1833 y(ducing)21
b(a)f(hybrid)h(approach)g(incorporating)h(both)e(models)h([4,)f(8,)f
(13)q(].)2006 1920 y(In)34 b([1],)j(Ax)o(elrod)e(proposes)g(a)f(model)h
(where)f(sub-phrases)i(in)d(the)2006 2007 y(templates)20
b(can)g(be)h(\223turned-on\224)g(depending)h(on)e(the)g(semantic)g
(input.)2006 2093 y(In)e([9],)g(Oh)g(and)h(Rudnick)o(y)h(propose)f(a)f
(purely)h(stochastic)g(surf)o(ace)g(re-)2006 2180 y(alization.)35
b(Stochastic)23 b(surf)o(ace)h(realization)f(is)g(\003e)o(xible)f(and)i
(f)o(ast)f(b)o(ut)2006 2267 y(it)k(runs)h(the)g(una)o(v)o(oidable)h
(risk)e(of)h(generating)h(ungrammatical)g(and)2006 2354
y(ill-formed)19 b(sentences.)2131 2449 y(In)29 b(this)h(paper)m(,)i(we)
e(propose)h(a)f(\003e)o(xible)f(frame)n(w)o(ork)i(for)e(natu-)2006
2536 y(ral)18 b(language)h(generation)g(in)f(dialogue)h(systems)g(that)
f(combines)h(both)2006 2623 y(rule-based)25 b(and)h(stochastic)f
(models.)40 b(Statistical)23 b(language)j(models)2006
2709 y(reduce)f(the)g(need)h(for)e(formal)h(linguistic)f
(characterization.)41 b(Simple)2006 2796 y(and)29 b(intuiti)n(v)o(e)f
(semantic)h(rules)g(can)g(ef)n(fecti)n(v)o(ely)g(be)f(used)i(to)e
(obtain)2006 2883 y(an)h(output)h(of)f(sustainable)h(quality)-5
b(,)32 b(\223by)e(rele)o(gating)f(some)h(aspects)2006
2970 y(of)e(le)o(xical)f(choice)i(...)48 b(to)27 b(the)h(statistical)f
(component\224)j([6].)49 b(In)27 b(ad-)2006 3056 y(dition,)e(we)f(sho)n
(w)g(ho)n(w)h(this)f(frame)n(w)o(ork)h(is)e(rob)o(ust)h(against)g
(missing)2006 3143 y(data,)h(and)f(ho)n(w)h(it)e(is)g(possible)i(to)e
(introduce)i(v)n(ariability)f(in)g(the)f(out-)2006 3230
y(put)h(with)f(minimal)h(ef)n(forts.)37 b(The)24 b(proposed)h
(algorithm)f(can)g(also)g(be)2006 3317 y(implemented)f(to)f(run)h(in)f
(a)g(fraction)h(of)f(real-time.)33 b(This)22 b(frame)n(w)o(ork)2006
3403 y(has)f(been)h(implemented)g(in)f(the)f(Bell)h(Labs)g
(Communicator)h(system,)2006 3490 y(a)29 b(task-based)h
(information-seeking)g(spok)o(en)g(dialogue)g(system.)53
b(It)2006 3577 y(is)25 b(currently)h(dedicated)h(to)e(the)h(tra)o(v)o
(el)f(reserv)n(ation)h(domain,)i(b)o(ut)d(its)2006 3664
y(components)30 b(are)d(portable)i(across)f(multiple)g(domains.)50
b(Our)28 b(o)o(v)o(er)o(-)2006 3750 y(all)23 b(goal,)i(is)e(to)g
(decrease)i(prototyping)g(time)e(and)h(ef)n(fort)f(by)h(creating)2006
3837 y(application-independent)f(tools)d(and)g(algorithms)g(that)g
(automate)g(the)2006 3924 y(design)k(process)h(and)f(that)g(can)g(be)f
(used)i(by)f(non-e)o(xpert)h(application)2006 4011 y(de)n(v)o(elopers.)
2515 4217 y Fq(2.)60 b(System)25 b(Ov)o(er)o(view)2006
4355 y Fp(In)d(dialogue)h(systems,)h(natural)e(language)i(generation)f
(is)f(the)g(task)h(of)2006 4442 y(automatically)28 b(producing)h
(utterances)f(from)g(an)g(abstract)f(semantic)2006 4529
y(representation.)56 b(In)30 b([13],)i(Stent)d(proposes)i(that)e
(natural)h(language)2006 4616 y(generators)g(should)g(consist)f(of)g
(three)g(layers:)43 b(planning)30 b(intention,)2006 4702
y(content,)f(and)e(form.)45 b(In)26 b(dialogue)i(systems,)g
(determining)f(the)f(sys-)2006 4789 y(tem')l(s)c(intent,)i(or)e
(communicati)n(v)o(e)j(goal,)e(is)g(out)g(of)f(the)h(scope)h(of)e(the)
2006 4876 y(generator)f(and)g(is)f(usually)g(handled)i(by)e(the)h
(dialogue)g(manager)l(.)28 b(The)2006 4963 y(tw)o(o)16
b(remaining)h(tasks)f(are)g(respecti)n(v)o(ely)h(performed)f(by)h(the)f
(utterance)2006 5050 y(planner)k(and)f(the)g(utterance)h(realizer)f
(described)h(ne)o(xt.)2492 5255 y Fq(3.)60 b(Utterance)26
b(Planner)2006 5394 y Fp(The)d(main)g(function)g(of)g(the)g(utterance)g
(planner)h(is)e(to)h(determine)g(the)2006 5481 y(content)i(of)f(the)g
(system)h(prompt)f(according)i(to)e(the)g(communicati)n(v)o(e)2006
5568 y(goal)k(selected)f(by)h(the)g(dialogue)g(manager)l(.)49
b(A)27 b(typical)h(goal)g(frame)p eop
%%Page: 2 2
2 1 bop -120 100 a Fp(produced)21 b(by)e(the)g(dialogue)h(manager)g(is)
f(sho)n(wn)g(belo)n(w:)-70 229 y Fn([\(GO)n(AL)5 304
y(:intention)111 b(inform)5 379 y(:predicate)104 b(updatedV)-7
b(alues)5 454 y(:conte)o(xt)152 b(.trip.\003ight.le)o(g1\)])-120
588 y Fp(System)23 b(prompts)g(are)g(cate)o(gorized)h(according)g(to)f
(the)g(system')l(s)g(`in-)-120 675 y(tention')29 b(which)f(corresponds)
j(to)d(a)g(general)h(communicati)n(v)o(e)h(goal,)-120
762 y(e.g.,)21 b(`inform'.)30 b(The)21 b(\002elds)g(`predicate')g(and)h
(`conte)o(xt')g(further)f(con-)-120 849 y(strain)c(the)g(prompt)h(type)
g(by)g(specifying)g(a)g(sub-goal,)g(e.g.,)f(inform)g(the)-120
935 y(user)23 b(about)h(changes)g(to)f(the)g(v)n(alue)g(of)g(attrib)o
(utes,)g(and)g(the)g(semantic)-120 1022 y(sub-tree)g(that)f(the)h
(prompt)g(refers)f(too,)h(e.g.,)g(the)f(\002rst)g(le)o(g)g(of)h(a)f
(\003ight)-120 1109 y(\(see)c([2,)f(10)q(])g(for)h(details)f(on)i(the)e
(semantic)h(tree)g(representation\).)24 b(The)-120 1196
y(task)c(of)f(the)h(utterance)g(planner)g(is)f(to)h(select)f(the)g
(appropriate)i(seman-)-120 1282 y(tic)g(content)h(for)f(each)h(cate)o
(gory)h(of)e(system)h(prompts.)31 b(The)21 b(semantic)-120
1369 y(content)29 b(is)f(de\002ned)h(here)g(as)f(a)g(set)g(of)h(attrib)
o(ute-v)n(alue)f(pairs,)i(\(e.g.,)-120 1456 y Fr(CITY:NEWARK)p
Fp(\).)5 1548 y(Selecting)24 b(the)g(appropriate)h(set)f(of)g(attrib)o
(ute-v)n(alue)g(pairs)h(to)f(in-)-120 1635 y(clude)17
b(in)g(the)g(utterance)g(is)f(a)h(hard)g(problem)h(that)e(is)h(be)o
(yond)h(the)f(scope)-120 1722 y(of)f(this)g(paper)l(.)23
b(Man)o(y)17 b(sources)g(of)f(information)g(ha)o(v)o(e)h(to)f(be)g
(combined)-120 1809 y(to)j(determine)h(what)f(information)h(is)f(rele)n
(v)n(ant)h(to)f(the)g(user)h(including:)-120 1895 y(communicati)n(v)o
(e)h(goal)e(and)h(subgoal,)g(dialogue)g(conte)o(xt,)g(ontological)-120
1982 y(representation)30 b(of)g(the)f(domain,)j(user)e(input,)i(system)
d(output,)k(dia-)-120 2069 y(logue)20 b(history)f(and)h(user)f
(preferences.)5 2161 y(In)35 b(order)g(to)g(introduce)h(v)n(ariability)
f(in)h(the)f(system)g(prompts,)-120 2248 y(se)n(v)o(eral)47
b(syntactic)g(structures)g(and)h(le)o(xicalisations)f(are)g(consid-)
-120 2335 y(ered)e(for)f(the)g(same)g(communicati)n(v)o(e)i(goal.)99
b(Such)44 b(alternati)n(v)o(e)-120 2421 y(forms,)58 b(or)51
b(phrasal)g(patterns,)58 b(e.g.,)g Fr(Now)44 b(you're)g(flying)-120
2508 y Fo(<)p Fr(FROMCITY)p Fo(>)f(<)p Fr(TOCITY)p Fo(>)p
Fp(,)28 b(contain)h(non-terminal)g(symbols,)-120 2595
y(e.g.)60 b Fo(<)p Fr(FROMCITY)p Fo(>)29 b Fp(that)i(abstract)g(a)o(w)o
(ay)h(all)e(the)i(details)f(about)-120 2682 y(the)f(semantic)g
(content,)j(e.g.,)f(city)-5 b(,)32 b(state,)g(airport,)g(country)-5
b(.)57 b(Such)-120 2768 y(a)25 b(symbol)h(corresponds)h(to)e(a)g
(concept)h(of)f(the)g(application)h(domain,)-120 2855
y(which)18 b(can)g(ha)o(v)o(e)g(dif)n(ferent)g(le)o(xicalisations)g(as)
g(discussed)h(in)e(the)h(ne)o(xt)-120 2942 y(section)37
b(e.g.,)k Fr(Chicago)p Fp(,)e Fr(Chicago)44 b(O'Hare)p
Fp(,)39 b(and)f Fr(O'Hare)-120 3029 y(airport)44 b(in)g(Chicago)19
b Fp(are)h(alternati)n(v)o(e)g(le)o(xicalisations)g(of)g(the)-120
3116 y Fo(<)p Fr(CITY)p Fo(>)e Fp(symbol.)25 b(The)19
b(output)h(of)f(the)g(utterance)h(planner)g(consists)-120
3202 y(of)33 b(a)f(list)g(of)g(phrasal)h(patterns)g(and)h(scores,)i
(and)d(a)f(list)g(of)h(v)n(alues)-120 3289 y(\(constraints)i(on)g(the)f
(patterns\).)71 b(F)o(or)34 b(e)o(xample,)k(gi)n(v)o(en)e(a)e(change)
-120 3376 y(in)41 b(the)f(v)n(alue)i(of)f(the)f(departure)i(city)f(and)
g(the)g(aforementioned)-120 3463 y(communicati)n(v)o(e)26
b(goal)f(the)g(output)g(of)g(the)g(utterance)g(planner)g(might)-120
3549 y(be:)-70 3679 y Fn([\(P)-6 b(A)f(TTERNS)5 3754
y(`No)n(w)17 b(I)g(ha)o(v)o(e)h(you)f(lea)o(ving)i Fm(<)p
Fn(FR)m(OMCITY)p Fm(>)e(<)p Fn(T)o(OCITY)p Fm(>)p Fn(')99
b(0.92)5 3829 y(`No)n(w)17 b(you')m(re)h(\003ying)g Fm(<)p
Fn(FR)m(OMCITY)p Fm(>)f(<)p Fn(T)o(OCITY)p Fm(>)p Fn(')246
b(0.92)5 3904 y(`No)n(w)17 b(I)g(ha)o(v)o(e)h(you)f(lea)o(ving)i
Fm(<)p Fn(FR)m(OMCITY)p Fm(>)p Fn(')469 b(0.8)5 3978
y(`Ok,)17 b(your)g(ne)n(w)h(\003ight)g(lea)o(v)o(es)g
Fm(<)p Fn(FR)m(OMCITY)p Fm(>)p Fn('\))381 b(0.8)-70 4053
y(\(CONTENT)5 4128 y(:depCity)104 b(`)-5 b(Athens')5
4203 y(:depState)86 b(`Geor)o(gia')5 4278 y(:arrCity)126
b(`Ne)n(w)o(ark'\)])-120 4449 y Fp(Note)29 b(that)g(each)h(phrasal)g
(pattern)f(may)h(contain)g(a)f(dif)n(ferent)h(set)f(of)-120
4535 y(attrib)o(utes.)36 b(The)24 b(scores)g(associated)g(with)f(each)i
(phrasal)f(pattern)g(are)-120 4622 y(a)19 b(by-product)i(of)e(the)g
(conte)o(xt)h(selection)g(algorithm)f(and)h(are)f(solely)h(a)-120
4709 y(function)g(of)f(which)g(attrib)o(utes)f(the)h(phrasal)h(pattern)
f(contains.)358 4912 y Fq(4.)59 b(Utterance)27 b(Realizer)-120
5047 y Fp(Utterance)16 b(realization)f(is)g(the)h(process)g(of)f
(producing)j(te)o(xt)d(that)g(is)g(syn-)-120 5134 y(tactically)31
b(and)h(morphologically)h(correct,)i(while)c(consistent)h(with)-120
5221 y(the)18 b(input)g(from)f(the)h(utterance)h(planner)l(.)k(In)18
b(this)f(process,)h(a)g(language)-120 5308 y(model,)32
b(e.g.,)g(a)e(generati)n(v)o(e)g(grammar)m(,)j(is)c(used.)56
b(As)29 b(discussed)i(in)-120 5394 y(the)c(pre)n(vious)h(section,)h
(the)e(utterance)h(planner)g(pro)o(vides)f(the)g(utter)o(-)-120
5481 y(ance)21 b(realizer)f(with)f(dif)n(ferent)i(phrasal)f(patterns,)h
(e.g.,)e Fr(What)44 b(time)-120 5568 y(would)g(you)g(like)g(to)h(get)f
(in)h Fo(<)p Fr(TOCITY)p Fo(>)p Fr(?)p Fp(.)28 b(The)21
b(main)2006 100 y(role)k(of)f(the)h(utterance)g(realizer)g(is)f(to)g
(con)m(v)o(ert)i(into)f(surf)o(ace)g(e)o(xpres-)2006
186 y(sions)36 b(the)h(non-terminals,)k(e.g.,)e Fo(<)p
Fr(TOCITY)p Fo(>)p Fp(,)g(for)d(each)g(of)g(the)2006
273 y(phrasal)30 b(patterns)f(and)h(rank)f(order)h(the)f(produced)i
(surf)o(ace)f(realiza-)2006 360 y(tions.)c(V)-8 b(alue)19
b(constraints,)i(e.g.,)e(`:arrCity')g(is)g(`Ne)n(w)o(ark',)h(need)h(to)
e(be)2006 447 y(satis\002ed.)j(Rob)o(ustness)c(to)n(w)o(ards)g(missing)
f(or)g(underspeci\002ed)i(seman-)2006 533 y(tic)f(information)i(is)e
(also)h(e)o(xpected.)2131 621 y(A)j(fully)h(linguistically)g(moti)n(v)n
(ated)h(utterance)f(realizer)g(can)g(pro-)2006 707 y(duce)28
b(high-quality)g(te)o(xt)f(output)h(and)g(is)e(easy)i(to)f(maintain)h
(and)f(e)o(x-)2006 794 y(tend;)41 b(ho)n(we)n(v)o(er)m(,)d(such)d(a)e
(system)h(depends)h(on)g(lar)o(ge)e(amounts)i(of)2006
881 y(hand-crafted)25 b(kno)n(wledge.)39 b(Statistical)22
b(models)i(don')o(t)f(require)h(a)g(lot)2006 968 y(of)k(linguistic)f
(resources,)k(b)o(ut)c(tend)i(to)e(generate)i(ill-formed)e(or)h(un-)
2006 1054 y(grammatical)21 b(sentences.)29 b(In)21 b(this)f(section,)i
(a)e(hybrid)i(generation)f(ap-)2006 1141 y(proach)29
b(is)e(described)h(that)g(combines)g(the)g(\003e)o(xibility)f(and)h
(simplic-)2006 1228 y(ity)d(of)h(template-based)g(systems)g(with)g(the)
f(po)n(wer)m(,)j(scalability)-5 b(,)27 b(and)2006 1315
y(maintainability)19 b(of)g(comple)o(x)h(rule-based)g(NLG)e(systems.)
2006 1488 y Fl(4.1.)45 b(Rule-based)18 b(Language)h(Model)2006
1619 y Fp(Phrasal)32 b(patterns)i(contain)f(non-terminal)h(symbols,)i
(which)d(corre-)2006 1706 y(spond)c(to)e(concepts)i(in)e(the)h
(application)g(domain.)50 b(These)28 b(symbols)2006 1792
y(are)23 b(recursi)n(v)o(ely)g(e)o(xpanded)i(by)f(the)f(rules)g(of)f(a)
h(semantic)h(generati)n(v)o(e)2006 1879 y(grammar)m(,)f(until)e(the)h
(phrasal)g(patterns)g(contain)h(only)f(terminal)f(sym-)2006
1966 y(bols)29 b(\(w)o(ords\).)51 b(W)-6 b(e)28 b(say)h(that)f(this)g
(grammar)h(is)f(semantic)g(because)2006 2053 y(it)22
b(does)h(not)g(contain)g(a)f(detailed)h(analysis)g(of)g(the)f(syntax)i
(of)e(the)h(lan-)2006 2139 y(guage;)g(rather)m(,)d(it)g(encodes)i(kno)n
(wledge)h(about)e(ho)n(w)h(le)o(xical)e(patterns)2006
2226 y(co-occur)g(within)f(the)g(application)g(domain)h(to)f(form)g
(concepts.)2131 2313 y(The)j(recursi)n(v)o(e)g(weighted)h
(\002nite-state)f(grammar)h(in)f(our)g(system)2006 2400
y(is)29 b(roughly)h(equi)n(v)n(alent)g(to)f(a)g(probabilistic)g(conte)o
(xt)h(free)f(grammar)2006 2487 y(\(PCFG\).)17 b(Unfortunately)-5
b(,)19 b(e)o(xpanding)h(phrasal)f(patterns)g(via)f(a)h(PCFG)2006
2574 y(has)j(some)g(limitations.)31 b(By)21 b(the)h(de\002nition)g(of)f
(conte)o(xt-free,)i(the)e(e)o(x-)2006 2660 y(pansion)27
b(of)f(an)o(y)h(PCFG)d(rule)i(is)g(performed)h(independently)h(of)e(an)
o(y)2006 2747 y(other)21 b(e)o(xpansion.)31 b(In)21 b(natural)g
(languages,)h(ho)n(we)n(v)o(er)m(,)g(the)f(realization)2006
2834 y(of)e(a)g(phrase)h(usually)g(depends)h(on)f(its)e(location)i(in)f
(the)g(parse)h(tree)f([7].)2006 2921 y(F)o(or)c(e)o(xample,)h(consider)
g(the)f(dif)n(ference)h(between)g(placing)g(a)f(pronoun)2006
3007 y(in)31 b(a)f(sentence)i(\(e.g.)59 b Fr(he)44 b(gave)g
Fk(it)h Fr(to)f(Bill)p Fp(\),)33 b(and)e(placing)h(a)2006
3094 y(corresponding)20 b(noun)g(phrase)f(\()p Fr(He)44
b(gave)g(Bill)g Fk(the)18 b(ball)p Fp(\);)g(in)g(the)2006
3181 y(latter)i(sentence)h(you)h(cannot)f(replace)g Fk(the)g(ball)g
Fp(with)f Fk(it)p Fp(.)27 b(PCFGs)19 b(lack)2006 3268
y(the)j(ability)f(to)h(model)g(horizontal)g(dependencies)i(within)e
(and)g(across)2006 3354 y(rules.)41 b(Similarly)-5 b(,)25
b(another)g(problem)h(with)e(PCFGs)g(is)g(their)g(lack)i(of)2006
3441 y(sensiti)n(vity)15 b(to)g(w)o(ords:)22 b(the)16
b(probability)f(of)h(their)e(parses)i(only)g(depends)2006
3528 y(on)25 b(structural)f(f)o(actors;)j(le)o(xical)d(co-occurrences)j
(are)d(not)g(tak)o(en)h(into)2006 3615 y(account,)18
b(and)f(consequently)i(man)o(y)e(inter)o(-le)o(xical)f(constraints)h
(are)g(ig-)2006 3701 y(nored.)2131 3789 y(In)f(the)g(conte)o(xt)i(of)e
(our)h(NLG)f(component,)i(an)f(e)n(v)o(en)g(more)g(impor)o(-)2006
3875 y(tant)e(problem)g(with)f(PCFGs)g(is)g(the)h(assumption)h(we)e(ha)
o(v)o(e)h(made)h(about)2006 3962 y(the)23 b(application)h(de)n(v)o
(eloper:)34 b(we)23 b(shouldn')o(t)h(e)o(xpect)g(him)f(to)h(possess)
2006 4049 y(an)o(y)k(linguistic)g(e)o(xpertise.)49 b(Badly)28
b(hand-written)g(rules)g(might)f(lead)2006 4136 y(the)17
b(NLG)f(component)i(to)f(generate)g(ungrammatical)h(sentences.)24
b(Fur)o(-)2006 4222 y(thermore,)29 b(the)f(de)n(v)o(eloper)g(is)f(lik)o
(ely)g(to)g(k)o(eep)i(adding)f(ne)n(w)f(rules)h(to)2006
4309 y(e)o(xpand)22 b(the)e(co)o(v)o(erage)h(and)g(the)f(v)n
(ariability)g(of)g(the)g(output)h(language,)2006 4396
y(thus)j(leading)g(to)f(an)h(o)o(v)o(er)o(-generation)g(problem:)33
b(the)24 b(combinatorial)2006 4483 y(f)o(actors)16 b(might)f(lead)h
(the)f(NLG)g(module)h(to)f(generate)h(a)g(v)n(ast)f(number)i(of)2006
4569 y(possible)22 b(utterances,)g(rendering)h(the)e(problem)h(of)g
(storing)f(them)h(and)2006 4656 y(choosing)d(the)e(best)g(one)g(dif)n
(\002cult.)22 b(There)17 b(do)h(e)o(xist)e(w)o(ays)i(to)f(represent)
2006 4743 y(lar)o(ge)h(amount)h(of)f(alternati)n(v)o(e)h(sentences)g
(in)f(compact)h(structures)f(lik)o(e)2006 4830 y(lattices.)37
b(Ho)n(we)n(v)o(er)m(,)26 b(it)d(w)o(ould)h(be)g(best)g(to)g(reduce)h
(the)e(search)i(space)2006 4916 y(by)19 b(weeding)h(out)f(bad)h
(candidates)g(in)f(the)g(\002rst)f(place.)2006 5090 y
Fl(4.2.)45 b(Statistical)18 b(Language)h(Model)2006 5221
y Fp(Gi)n(v)o(en)27 b(the)g(shortcomings)h(of)f(a)f(pure)i(PCFG)d
(generation)j(approach)2006 5308 y(detailed)19 b(in)g(the)g(pre)n
(vious)h(section,)f(we)f(propose)j(an)e(approach)h(which)2006
5394 y(prunes)i(out)g(sentences)g(that)f(are)g(unlik)o(ely)h(to)f(be)h
(generated)g(by)g(rank-)2006 5481 y(ing)32 b(them)h(with)f(a)g(second,)
k(le)o(xically-oriented)d(model.)63 b(A)32 b(w)o(ord-)2006
5568 y(based)22 b Fo(n)p Fp(-gram)f(grammar)g(lets)g(us)g(tak)o(e)g(le)
o(xical)g(co-occurrences)h(into)p eop
%%Page: 3 3
3 2 bop -61 780 a @beginspecial 0 @llx 0 @lly 209 @urx
90 @ury 2126 @rwi @setspecial
%%BeginDocument: ./algo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: F:\TPD\nlgblc\algo.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 209 90
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 209 90
%AI3_TileBox: 0 0 209 90
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

0 To
1.0000 0.0000 0.0000 1.0000 20.4000 81.0000 0 Tp
TP
/_Courier-Bold 7.5000 Tf
0.0000 Tc
 0 Tr
 [] 0 d
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(... DEPARTING <FROMCITY> ...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 134.4000 62.4000 0 Tp
TP
/_Helvetica-Oblique 7.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
('ruled-based'\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 144.6000 52.8000 0 Tp
TP
/_Helvetica-Oblique 7.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(model\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 J
1 j
  40.2000 45.0000 m
  43.2000 38.4000 L
  43.2000 45.0000 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 4.2000 50.4000 0 Tp
TP
/_Helvetica-Oblique 7.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n-gram\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 6.0000 41.4000 0 Tp
TP
/_Helvetica-Oblique 7.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(model\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  58.2000 77.4000 m
  58.2000 42.0000 L
S
U
u
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  58.2000 37.2000 m
  55.2000 43.8000 L
  55.8000 43.2000 L
  56.4000 43.2000 L
  57.6000 43.2000 L
  58.2000 43.2000 L
  59.4000 43.2000 L
  60.0000 43.2000 L
  60.6000 43.2000 L
  61.8000 43.8000 L
  58.2000 37.2000 L
F
U
u
  0.000 0.000 0.000 1.000 K
  108.0000 77.4000 m
  108.0000 54.6000 L
S
U
u
  108.0000 54.6000 m
  97.2000 41.4000 L
S
U
u
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  94.8000 37.2000 m
  96.0000 44.4000 L
  96.0000 43.8000 L
  96.6000 43.2000 L
  97.2000 42.6000 L
  97.8000 42.0000 L
  98.4000 41.4000 L
  99.6000 40.8000 L
  100.2000 40.8000 L
  100.8000 40.2000 L
  94.8000 37.2000 L
F
U
u
  0.000 0.000 0.000 1.000 K
  108.0000 54.6000 m
  118.8000 41.4000 L
S
U
u
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  121.8000 37.2000 m
  115.2000 40.2000 L
  115.8000 40.8000 L
  116.4000 40.8000 L
  117.6000 41.4000 L
  118.2000 42.0000 L
  118.8000 42.6000 L
  119.4000 43.2000 L
  120.0000 43.8000 L
  120.0000 44.4000 L
  121.8000 37.2000 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 194.4000 25.8000 0 Tp
TP
/_Helvetica 7.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(\(a\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 194.4000 6.0000 0 Tp
TP
/_Helvetica 7.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(\(b\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 21.0000 25.2000 0 Tp
TP
/_Courier-Bold 7.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(... DEPARTING FROM <CITY> ...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
 [4 2 ] 0 d
  0.000 0.000 0.000 1.000 K
1 j
  37.8000 21.6000 m
  103.8000 21.6000 L
  103.8000 34.2000 L
  37.8000 34.2000 L
  37.8000 21.6000 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 21.0000 6.0000 0 Tp
TP
/_Courier-Bold 7.5000 Tf
0.0000 Tc
 0 Tr
 [] 0 d
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(... DEPARTING LEAVING <CITY> ...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
 [4 2 ] 0 d
  0.000 0.000 0.000 1.000 K
1 j
  37.8000 2.4000 m
  117.0000 2.4000 L
  117.0000 14.4000 L
  37.8000 14.4000 L
  37.8000 2.4000 L
S
U
u
 [] 0 d
  0.000 0.000 0.000 1.000 K
  32.4000 53.4000 m
  36.6000 52.2000 L
  39.6000 49.2000 L
  42.0000 45.0000 L
  43.2000 39.0000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  118.2000 57.6000 m
  117.6000 52.2000 L
  121.8000 56.4000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  130.8000 64.8000 m
  126.6000 63.6000 L
  123.0000 61.2000 L
  120.0000 57.6000 L
  118.2000 52.8000 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial -120 949 a Fp(Figure)22 b(1:)30 b(Generation)22
b(by)h(the)f(rule)g(based)h(system)g(of)f(tw)o(o)g(possible)-120
1036 y(instantiations)27 b(of)g(DEP)-7 b(AR)l(TING)25
b Fo(<)p Fp(FR)m(OMCITY)p Fo(>)p Fp(.)45 b(\(a\))27 b(A)f(possi-)-120
1123 y(ble)20 b(e)o(xpansion,)j(rated)d(highly)h(by)g(the)g
Fo(n)p Fp(-gram)f(grammar)l(.)28 b(\(b\))21 b(A)f(less)-120
1210 y(lik)o(ely)f(e)o(xpansion,)h(rated)f(poor)h(by)f(the)g
Fo(n)p Fp(-gram)h(grammar)l(.)p -120 1266 1890 4 v -120
1380 a(account)40 b(within)f(surf)o(ace)h(w)o(ord)g(strings.)84
b(Furthermore,)44 b(with)39 b(a)-120 1467 y(`w)o(ord-concept')33
b Fo(n)p Fp(-gram,)h(i.e.,)e(an)g Fo(n)p Fp(-gram)f(trained)g(on)h
(terminals)-120 1553 y(and)c(nonterminals)g(of)f(the)g(semantic)g
(grammar)m(,)i(we)e(can)h(put)f(some)-120 1640 y(conte)o(xtual)d
(conditions)h(on)e(the)h(e)o(xpansion)g(of)g(a)f(node)h(according)h(to)
-120 1727 y(its)17 b(location)i(in)f(the)g(parse)h(tree.)j(This)c
(technique)h(is)f(similar)f(to)h(a)g(pars-)-120 1814
y(ing)h(strate)o(gy)g(currently)h(used)f(in)g(our)g(lab)g([11)q(].)5
1908 y(In)37 b(Fig.)f(1,)42 b(we)37 b(sho)n(w)h(an)g(e)o(xample)g
(where)f(we)g(can)h(e)o(xpand)-120 1994 y Fo(<)p Fr(FROMCITY)p
Fo(>)20 b Fp(into)j Fr(FROM)44 b Fo(<)p Fr(CITY)p Fo(>)p
Fp(,)22 b(b)o(ut)g(not)g(into)h Fr(DEPART-)-120 2081
y(ING)44 b Fo(<)p Fr(CITY)p Fo(>)p Fp(,)26 b(because)g(of)g(the)f
(conte)o(xt:)37 b(the)25 b(pre)n(vious)i(w)o(ord)f(is)-120
2168 y Fr(LEAVING)p Fp(,)d(and)j(the)f Fo(n)p Fp(-gram)h(model)g(tells)
e(us)i(that)f(the)g(probability)-120 2255 y(of)d Fr(LEAVING)44
b(DEPARTING)21 b Fp(is)h(v)o(ery)h(close)f(to)h(zero.)34
b(While)21 b(zero-)-120 2341 y(frequenc)o(y)g(counts)f(are)f(a)g
(problem)h(in)f(speech)i(recognition)f(language)-120
2428 y(models,)31 b(from)d(a)h(generati)n(v)o(e)g(point)g(of)f(vie)n(w)
-5 b(,)31 b(we)d(can)h(use)g(this)f(in-)-120 2515 y(formation)f(to)g
(delete)g(v)o(ery)h(unlik)o(ely)g(le)o(xical)f(co-occurrences)i(from)
-120 2602 y(output)20 b(sentences.)5 2696 y(This)i(approach)j(has)e
(man)o(y)h(adv)n(antages:)33 b(by)23 b(using)h(the)f
Fo(n)p Fp(-gram)-120 2782 y(grammar)15 b(to)g(prune)g(unlik)o(ely)h(e)o
(xpansions,)h(the)d(combinatorial)i(e)o(xplo-)-120 2869
y(sion)21 b(problem)h(we)e(w)o(ould)i(encounter)g(if)e(we)h(let)f(the)h
(semantic)g(gram-)-120 2956 y(mar)29 b(generate)h(all)f(sentences)h(it)
f(can)h(produce)g(is)f(greatly)h(reduced.)-120 3043 y(Furthermore,)i
(this)d(architecture)h(enables)g(us)f(to)g(achie)n(v)o(e)h(our)g(goal)
-120 3129 y(of)d(not)h(relying)g(on)g(linguistic)g(e)o(xpertise:)40
b(it)27 b(is)g(\003e)o(xible)g(enough)j(to)-120 3216
y(cope)21 b(with)f(semantic)h(grammar)g(rules)f(written)g(by)h(non-e)o
(xperts)h(\(lik)o(e)-120 3303 y(those)g(of)f(the)g(pre)n(vious)i(e)o
(xample\).)31 b(Finally)-5 b(,)21 b(by)h(training)f(an)h
Fo(n)p Fp(-gram)-120 3390 y(on)28 b(a)f(sequence)i(of)e(concepts)h(and)
g(w)o(ords)g(lik)o(e)f Fo(<)p Fr(AIRPORT)p Fo(>)43 b
Fr(in)-120 3476 y Fo(<)p Fr(CITY)p Fo(>)p Fp(,)32 b(we)e(can)h
(represent)g(co-occurrences)h(in)f(concepts)g(in)g(a)-120
3563 y(more)17 b(compact)h(w)o(ay)g(than)f(if)f(were)h(were)g(modeling)
h(strings)f(lik)o(e)g Fr(JFK)-120 3650 y(AIRPORT)44 b(IN)g(NEW)g(YORK)p
Fp(.)18 b(It)h(of)n(fers)g(a)g(better)f(understanding)k(of)-120
3737 y(the)16 b(underlying)h(language)h(and)e(increases)h(the)f(po)n
(wer)g(and)h(rob)o(ustness)-120 3823 y(of)i(the)g(statistical)f
(language)i(model.)417 4028 y Fq(5.)60 b(Implementation)-120
4165 y Fp(As)22 b(stated)g(abo)o(v)o(e,)h(the)f(utterance)h(realizer)f
(creates)g(utterances)h(gi)n(v)o(en)-120 4252 y(phrasal)k(patterns)f
(and)h(a)f(set)f(of)h(attrib)o(utes)g(by)g(inte)o(grating)h(tw)o(o)f
(sta-)-120 4339 y(tistical)e(models.)43 b(In)26 b(our)f
(implementation,)j(the)d(models)h(ha)o(v)o(e)g(been)-120
4426 y(encoded)g(as)e(\002nite)f(state)h(machines)h(\(FSM\),)e(using)i
(the)f(A)-8 b(T&T)23 b(Bell)-120 4512 y(Labs)j(Finite)g(State)f
(Machine)j(\(FSM\))d(library)h([12)q(].)45 b(The)26 b(encoding)-120
4599 y(scheme)19 b(is)e(v)o(ery)h(similar)f(to)h(that)g(of)g(our)g
(\002nite-state)f(recursi)n(v)o(e)h(parser)-120 4686
y([11)q(].)5 4780 y(In)k(our)i(architecture,)f(the)g(set)g(of)g(conte)o
(xt-free)g(rules)g(are)g(imple-)-120 4867 y(mented)c(as)f(a)g(\002nite)
g(state)g(transducer)h(\(FST\),)d(labelled)j Fo(R)q Fp(.)j(Left-hand)
-120 4953 y(sides)g(of)g(the)h(rules)f(are)g(mapped)h(to)f(the)g(input)
h(alphabet)g(of)f(the)g(FST)-6 b(,)-120 5040 y(and)25
b(right-hand)h(sides)f(to)f(the)h(output)h(alphabet.)41
b(Epsilon)24 b(\(null\))h(la-)-120 5127 y(bels,)k(denoted)g(as)f
(\223eps\224,)i(are)d(added)i(to)f(the)f(left-hand)h(side)g(of)f(the)
-120 5214 y(rule,)20 b(so)h(that)f(the)g(number)i(of)e(input)h(and)g
(output)g(symbols)g(are)f(equal.)-120 5300 y(Fig.)e(2)h(illustrates)g
(the)g(encoding)h(of)g(some)f(semantic)g(rules)h(are)f(in)f(the)-120
5387 y(FST)f Fo(R)q Fp(.)5 5481 y(W)-6 b(e)15 b(also)h(de\002ne)h(a)f
(second)h(FSM,)e Fo(N)8 b Fp(,)16 b(which)h(is)e(a)h(weighted)h
(\002nite)-120 5568 y(state)g(automaton)i(\(FSA\))d(that)h(encodes)i
(all)e(transitions)h(of)g(the)f(`w)o(ord-)2124 1071 y
@beginspecial 36 @llx 201 @lly 649 @urx 592 @ury 1984
@rwi @setspecial
%%BeginDocument: ./rules.eps
%!PS-Adobe-2.0
%%Creator: dot version gviz1.5.1 (09-29-99)
%%For: (galley) Michel Galley,See potam,BL11333
%%Title: FSM
%%Pages: (atend)
%%BoundingBox: 36 201 649 592
%%EndComments
%%BeginProlog
save
/DotDict 200 dict def
DotDict begin

%%BeginResource: procset
/coord-font-family /Times-Roman def
/default-font-family /Times-Roman def
/coordfont coord-font-family findfont 8 scalefont def

/InvScaleFactor 1.0 def
/set_scale {
	dup 1 exch div /InvScaleFactor exch def
	dup scale
} bind def

% styles
/solid { } bind def
/dashed { [9 InvScaleFactor mul dup ] 0 setdash } bind def
/dotted { [1 InvScaleFactor mul 6 InvScaleFactor mul] 0 setdash } bind def
/invis {/fill {newpath} def /stroke {newpath} def /show {pop newpath} def} bind def
/bold { 2 setlinewidth } bind def
/filled { } bind def
/unfilled { } bind def
/rounded { } bind def
/diagonals { } bind def

% hooks for setting color 
/nodecolor { sethsbcolor } bind def
/edgecolor { sethsbcolor } bind def
/graphcolor { sethsbcolor } bind def
/nopcolor {pop pop pop} bind def

/beginpage {	% i j npages
	/npages exch def
	/j exch def
	/i exch def
	/str 10 string def
	npages 1 gt {
		gsave
			coordfont setfont
			0 0 moveto
			(\() show i str cvs show (,) show j str cvs show (\)) show
		grestore
	} if
} bind def

/set_font {
	findfont exch
	scalefont setfont
} def

% draw aligned label in bounding box aligned to current point
% alignfactor tells what fraction to place on the left.
% -.5 is centered.
/alignedtext {			% text labelwidth fontsz alignfactor
	/alignfactor exch def
	/fontsz exch def
	/width exch def
	/text exch def
	gsave
		% even if node or edge is dashed, don't paint text with dashes
		[] 0 setdash
		currentpoint newpath moveto
		text stringwidth pop
		alignfactor mul fontsz -.3 mul rmoveto
		text show
	grestore
} def

/boxprim {				% xcorner ycorner xsize ysize
		4 2 roll
		moveto
		2 copy
		exch 0 rlineto
		0 exch rlineto
		pop neg 0 rlineto
		closepath
} bind def

/ellipse_path {
	/ry exch def
	/rx exch def
	/y exch def
	/x exch def
	matrix currentmatrix
	newpath
	x y translate
	rx ry scale
	0 0 1 0 360 arc
	setmatrix
} bind def

/endpage { showpage } bind def

/layercolorseq
	[	% layer color sequence - darkest to lightest
		[0 0 0]
		[.2 .8 .8]
		[.4 .8 .8]
		[.6 .8 .8]
		[.8 .8 .8]
	]
def

/setlayer {/maxlayer exch def /curlayer exch def
	layercolorseq curlayer get
	aload pop sethsbcolor
	/nodecolor {nopcolor} def
	/edgecolor {nopcolor} def
	/graphcolor {nopcolor} def
} bind def

/onlayer { curlayer ne {invis} if } def

/onlayers {
	/myupper exch def
	/mylower exch def
	curlayer mylower lt
	curlayer myupper gt
	or
	{invis} if
} def

/curlayer 0 def

%%EndResource
14 default-font-family set_font
1 setmiterlimit
% /arrowlength 10 def
% /arrowwidth 5 def
%%EndProlog
%%Page: 1 1
%%PageBoundingBox: 36 201 649 592
%%PageOrientation: Portrait
gsave
35 200 614 392 boxprim clip newpath
36 201 translate
0 0 1 beginpage
0.8095 set_scale
0 0 translate 0 rotate
0.000 0.000 0.000 graphcolor
14.00 /Times-Roman set_font

%	0
gsave 10 dict begin
bold
18 228 18 18 ellipse_path
stroke
gsave 10 dict begin
18 229 moveto (0) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	1
gsave 10 dict begin
solid
572 336 18 18 ellipse_path
stroke
gsave 10 dict begin
572 337 moveto (1) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	0 -> 1
newpath 19 246 moveto
23 292 34 412 54 431 curveto
84 458 503 452 536 431 curveto
554 419 563 387 567 363 curveto
stroke
newpath 564 363 moveto
569 354 lineto
569 364 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
327 458 moveto (<FROMCITY>:BETWEEN) 158 14.00 -0.50 alignedtext
end grestore

%	0 -> 1
newpath 20 246 moveto
25 283 38 367 54 379 curveto
120 425 460 402 536 379 curveto
536 379 545 368 554 357 curveto
stroke
newpath 552 356 moveto
560 350 lineto
555 359 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
327 414 moveto (<FROMCITY>:DEPART) 146 14.00 -0.50 alignedtext
end grestore

%	0 -> 1
newpath 28 243 moveto
38 271 28 314 54 327 curveto
186 388 463 353 547 340 curveto
stroke
newpath 544 338 moveto
554 339 lineto
544 343 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
327 371 moveto (<FROMCITY>:FROM) 131 14.00 -0.50 alignedtext
end grestore

%	0 -> 1
newpath 31 241 moveto
37 253 43 266 54 269 curveto
198 296 464 325 547 333 curveto
stroke
newpath 544 330 moveto
554 334 lineto
544 335 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
327 327 moveto (<FROMCITY>:LEAVING) 154 14.00 -0.50 alignedtext
end grestore

%	2
gsave 10 dict begin
solid
327 256 18 18 ellipse_path
stroke
gsave 10 dict begin
327 257 moveto (2) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	0 -> 2
newpath 36 230 moveto
89 235 240 249 301 253 curveto
stroke
newpath 299 250 moveto
309 254 lineto
299 255 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
138 255 moveto (<FROMCITY>:LEAVING) 154 14.00 -0.50 alignedtext
end grestore

%	3
gsave 10 dict begin
solid
572 152 18 18 ellipse_path
stroke
gsave 10 dict begin
572 153 moveto (3) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	0 -> 3
newpath 36 226 moveto
109 218 388 189 536 169 curveto
537 168 541 166 547 164 curveto
stroke
newpath 546 162 moveto
556 160 lineto
548 166 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
327 213 moveto (<CITY>:<city>) 88 14.00 -0.50 alignedtext
end grestore

%	0 -> 3
newpath 31 215 moveto
38 208 47 201 54 199 curveto
115 180 177 165 240 160 curveto
328 151 483 151 546 152 curveto
stroke
newpath 544 150 moveto
554 152 lineto
544 155 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
327 169 moveto (<CITY>:<airport>) 105 14.00 -0.50 alignedtext
end grestore

%	4
gsave 10 dict begin
solid
327 98 18 18 ellipse_path
stroke
gsave 10 dict begin
327 99 moveto (4) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	0 -> 4
newpath 20 210 moveto
23 185 32 142 54 133 curveto
120 105 247 99 302 98 curveto
stroke
newpath 299 96 moveto
309 98 lineto
299 101 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
138 142 moveto (<CITY>:<city>) 88 14.00 -0.50 alignedtext
end grestore

%	0 -> 4
newpath 19 210 moveto
23 170 37 92 54 79 curveto
112 38 247 73 303 90 curveto
stroke
newpath 301 87 moveto
310 92 lineto
300 92 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
138 88 moveto (<CITY>:<airport>) 105 14.00 -0.50 alignedtext
end grestore

%	5
gsave 10 dict begin
solid
734 152 22 22 ellipse_path
stroke
734 152 18 18 ellipse_path
stroke
gsave 10 dict begin
734 153 moveto (5) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	0 -> 5
newpath 22 210 moveto
31 165 54 52 54 52 curveto
115 0 459 62 536 83 curveto
584 95 663 125 705 141 curveto
stroke
newpath 705 138 moveto
713 144 lineto
703 143 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
484 92 moveto (<CITY>:<city>) 88 14.00 -0.50 alignedtext
end grestore

%	1 -> 5
newpath 584 322 moveto
611 291 677 216 712 177 curveto
stroke
newpath 711 175 moveto
719 169 lineto
714 178 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
651 304 moveto (eps:<CITY>) 70 14.00 -0.50 alignedtext
end grestore

%	2 -> 1
newpath 345 256 moveto
386 257 484 260 536 277 curveto
548 281 558 298 564 313 curveto
stroke
newpath 565 309 moveto
566 319 lineto
560 310 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
484 286 moveto (eps:FROM) 62 14.00 -0.50 alignedtext
end grestore

%	3 -> 5
newpath 590 152 moveto
617 152 668 152 702 152 curveto
stroke
newpath 702 150 moveto
712 152 lineto
702 155 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
651 161 moveto (eps:<state>) 63 14.00 -0.50 alignedtext
end grestore

%	4 -> 3
newpath 345 99 moveto
385 101 483 107 536 119 curveto
542 121 550 127 556 133 curveto
stroke
newpath 556 129 moveto
561 138 lineto
552 133 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
484 128 moveto (eps:IN) 37 14.00 -0.50 alignedtext
end grestore
endpage
grestore
%%PageTrailer
%%EndPage: 1
%%Trailer
%%Pages: 1
end
restore
%%EOF

%%EndDocument
 @endspecial 2171 1241 a(Figure)i(2:)k(The)c(FST)f Fo(R)h
Fp(of)g(a)g(simple)g(semantic)g(grammar)p 2006 1298 V
2006 1386 a(concept')30 b Fo(n)p Fp(-gram,)i(including)f(back-of)n(f)f
(probabilities.)54 b(Finally)-5 b(,)32 b(a)2006 1473
y(weighted)d(FSA)e Fo(P)38 b Fp(is)28 b(constructed)h(that)f
(represents)h(all)e(alternati)n(v)o(e)2006 1560 y(phrasal)19
b(patterns.)2131 1647 y(The)d(e)o(xpansion)h(of)f(the)g(phrasal)h
(patterns)f(is)g(done)h(by)g(recursi)n(v)o(ely)2006 1733
y(composing)28 b Fo(P)36 b Fp(with)25 b(both)i(language)g(models,)h
(follo)n(wed)f(by)f(taking)2006 1820 y(the)19 b(output)h(projection)f
(\(i.e.,)f(discarding)i(the)f(input)g(symbols\):)2574
2054 y Fo(L)83 b Fj(=)g Fo(R)18 b Fs(\016)f Fo(N)765
b Fp(\(1\))2542 2166 y Fo(P)2591 2174 y Fi(0)2709 2166
y Fj(=)83 b Fo(P)908 b Fp(\(2\))2535 2277 y Fo(P)2584
2285 y Fh(n)2709 2277 y Fj(=)83 b(\()p Fo(P)2931 2285
y Fh(n)p Fg(\000)p Fi(1)3069 2277 y Fs(\016)17 b Fo(L)p
Fj(\))3206 2297 y Fn(proj)h(2)3809 2277 y Fp(\(3\))2131
2424 y(The)h(recursion)i(terminates)f(when)g Fo(P)3125
2432 y Fh(n)3187 2424 y Fp(equals)g Fo(P)3446 2432 y
Fh(n)p Fg(\000)p Fi(1)3587 2424 y Fp(\227)f(when)i(a)2006
2511 y(recursion)g(doesn')o(t)f(create)g(an)o(y)g(ne)n(w)g(te)o(xt)g
(span)3275 2479 y Ff(1)3305 2511 y Fp(.)25 b(Checking)c(whether)2006
2598 y(tw)o(o)15 b(automata)h(are)e(equi)n(v)n(alent)j(is)d
(computationally)i(e)o(xpensi)n(v)o(e,)h(since)2006 2684
y(both)25 b(automata)f(ha)o(v)o(e)h(to)f(be)g(minimized)h(in)f(order)g
(to)g(be)g(compared.)2006 2771 y(But)29 b(a)g(simple)h(analysis)g(of)f
(the)h(rules)f(can)h(determine)g(what)f(is)g(the)2006
2858 y(maximum)15 b(number)h(of)f(recursion,)g(since)g(it)f(is)g(equi)n
(v)n(alent)i(to)f(the)f(max-)2006 2945 y(imum)20 b(depth)h(of)f(the)g
(generati)n(v)o(e)h(trees.)26 b(The)20 b(resulting)h(automaton)g(is)
2006 3031 y(a)15 b(string)g(composed)i(of)f(only)f(w)o(ords)h(and)g
(attrib)o(utes.)21 b(Fig.)15 b(3)g(illustrates)2006 3118
y(the)k(e)o(xpansion)i(of)d(a)h(phrasal)h(pattern.)2131
3205 y(The)31 b(resulting)i(FSM)e(is)h(then)g(composed)i(with)e(FSAs)e
(encod-)2006 3292 y(ing)39 b(the)f(constraints.)81 b(F)o(or)38
b(e)o(xample,)44 b(if)37 b(the)i(utterance)g(planner)2006
3378 y(speci\002es)44 b(that)g(the)g(utterance)h(should)g(contain)g(e)o
(xactly)g(the)f(at-)2006 3465 y(trib)o(utes)21 b Fo(<)p
Fr(airport)p Fo(>)p Fp(,)p Fo(<)p Fr(state)p Fo(>)p Fp(,)p
Fo(<)p Fr(digit)p Fo(>)p Fp(,)c(and)22 b Fo(<)p Fr(ampm)p
Fo(>)p Fp(,)2006 3552 y(all)h(paths)h(in)g(the)g(output)g(FSM)f(that)h
(don')o(t)g(satisfy)f(those)h(conditions)2006 3639 y(are)e(eliminated.)
33 b(A)21 b Fk(n)p Fp(-best)i(search)f(through)i(the)e(resulting)g(FSM)
f(de-)2006 3725 y(termines)d(a)g(candidate)i(set)e(of)g(generated)h
(sentences)g(to)f(choose)i(from.)2659 3923 y Fq(6.)60
b(Discussion)2006 4053 y Fp(The)25 b(e)o(xample)g(in)g(Fig.)f(4)g(sho)n
(ws)i(ho)n(w)f(the)g(`w)o(ord-concept')h Fo(n)p Fp(-gram)2006
4140 y(can)20 b(help)h(reducing)g(the)f(number)g(of)g(ungrammatical)h
(sentences.)27 b(W)-6 b(e)2006 4226 y(ha)o(v)o(e)35 b(run)f(the)h(NLG)f
(module)h(in)f(tw)o(o)h(dif)n(ferent)f(situations,)39
b(once)2006 4313 y(solely)18 b(using)h(the)f(semantic)h(rule-based)g
(model,)f(and)h(once)g(with)f(both)2006 4400 y(the)d(rule-based)g(and)h
Fo(n)p Fp(-gram)f(\(trigram\))f(models.)23 b(Both)14
b(systems)i(were)2006 4487 y(seeded)27 b(with)e(the)h(same)h(phrasal)f
(pattern)g(and)h(the)f(same)g(v)n(alues)h(for)2006 4573
y(the)21 b(database)i(attrib)o(utes.)29 b(Since)21 b(a)h
Fo(n)p Fp(-gram)g(model)f(is)g(well)g(suited)h(to)2006
4660 y(catch)f(short-term)g(dependencies)i(\(e.g.,)e(agreement)h
(between)f(a)g(sub-)2006 4747 y(ject)f(and)i(a)e(v)o(erb\),)i(man)o(y)f
(ungrammatical)h(generations)g(are)e(a)o(v)o(oided.)2006
4834 y(W)-6 b(e)18 b(noticed)h(that)f(most)h(of)f(the)g(incorrect)h(w)o
(ords)g(appear)g(at)f(the)h(edges)2006 4920 y(of)e(either)f(the)h
(\002x)o(ed)g(part)g(or)f(the)h(freely)g(generated)h(part)e(of)h(the)g
(phrasal)2006 5007 y(pattern.)58 b(This)30 b(is)g(the)h(case)f(in)h
(error)f(E1,)j(where)e(an)f(error)h(occurs)2006 5094
y(right)26 b(between)g(the)g(edges)g(of)g(both)h(\002x)o(ed)e(\()p
Fr(flying)p Fp(\))g(and)h(v)n(ariable)2006 5181 y(\()p
Fr(Newark)44 b(at)g(7:20am)p Fp(\))27 b(parts.)49 b Fo(N)8
b Fp(-gram)29 b(models)f(also)g(help)h(to)2006 5267 y(a)o(v)o(oid)c
(error)g(lik)o(e)g(in)g(errors)g(E3)g(and)g(E4,)h(because)g(the)o(y)g
(correspond)2006 5354 y(to)g(unseen)h(sequence)h(of)e(w)o(ords.)46
b(Ho)n(we)n(v)o(er)m(,)28 b(error)e(E2)g(may)h(not)f(be)2006
5441 y(a)o(v)o(oidable,)19 b(e)n(v)o(en)h(with)e(a)h(trigram.)p
2006 5489 756 4 v 2096 5544 a Ff(1)2126 5568 y Fn(A)d(span)h(is)g(a)g
(portion)i(of)e(a)g(sentence)i(or)e(utterance.)p eop
%%Page: 4 4
4 3 bop -95 105 a Fp(\(a\))91 129 y @beginspecial 36
@llx 379 @lly 648 @urx 414 @ury 2352 @rwi @setspecial
%%BeginDocument: ./rec0.eps
%!PS-Adobe-2.0
%%Creator: dot version gviz1.5.1 (09-29-99)
%%For: (galley) Michel Galley,See potam,BL11333
%%Title: FSM
%%Pages: (atend)
%%BoundingBox: 36 379 648 414
%%EndComments
%%BeginProlog
save
/DotDict 200 dict def
DotDict begin

%%BeginResource: procset
/coord-font-family /Times-Roman def
/default-font-family /Times-Roman def
/coordfont coord-font-family findfont 8 scalefont def

/InvScaleFactor 1.0 def
/set_scale {
	dup 1 exch div /InvScaleFactor exch def
	dup scale
} bind def

% styles
/solid { } bind def
/dashed { [9 InvScaleFactor mul dup ] 0 setdash } bind def
/dotted { [1 InvScaleFactor mul 6 InvScaleFactor mul] 0 setdash } bind def
/invis {/fill {newpath} def /stroke {newpath} def /show {pop newpath} def} bind def
/bold { 2 setlinewidth } bind def
/filled { } bind def
/unfilled { } bind def
/rounded { } bind def
/diagonals { } bind def

% hooks for setting color 
/nodecolor { sethsbcolor } bind def
/edgecolor { sethsbcolor } bind def
/graphcolor { sethsbcolor } bind def
/nopcolor {pop pop pop} bind def

/beginpage {	% i j npages
	/npages exch def
	/j exch def
	/i exch def
	/str 10 string def
	npages 1 gt {
		gsave
			coordfont setfont
			0 0 moveto
			(\() show i str cvs show (,) show j str cvs show (\)) show
		grestore
	} if
} bind def

/set_font {
	findfont exch
	scalefont setfont
} def

% draw aligned label in bounding box aligned to current point
% alignfactor tells what fraction to place on the left.
% -.5 is centered.
/alignedtext {			% text labelwidth fontsz alignfactor
	/alignfactor exch def
	/fontsz exch def
	/width exch def
	/text exch def
	gsave
		% even if node or edge is dashed, don't paint text with dashes
		[] 0 setdash
		currentpoint newpath moveto
		text stringwidth pop
		alignfactor mul fontsz -.3 mul rmoveto
		text show
	grestore
} def

/boxprim {				% xcorner ycorner xsize ysize
		4 2 roll
		moveto
		2 copy
		exch 0 rlineto
		0 exch rlineto
		pop neg 0 rlineto
		closepath
} bind def

/ellipse_path {
	/ry exch def
	/rx exch def
	/y exch def
	/x exch def
	matrix currentmatrix
	newpath
	x y translate
	rx ry scale
	0 0 1 0 360 arc
	setmatrix
} bind def

/endpage { showpage } bind def

/layercolorseq
	[	% layer color sequence - darkest to lightest
		[0 0 0]
		[.2 .8 .8]
		[.4 .8 .8]
		[.6 .8 .8]
		[.8 .8 .8]
	]
def

/setlayer {/maxlayer exch def /curlayer exch def
	layercolorseq curlayer get
	aload pop sethsbcolor
	/nodecolor {nopcolor} def
	/edgecolor {nopcolor} def
	/graphcolor {nopcolor} def
} bind def

/onlayer { curlayer ne {invis} if } def

/onlayers {
	/myupper exch def
	/mylower exch def
	curlayer mylower lt
	curlayer myupper gt
	or
	{invis} if
} def

/curlayer 0 def

%%EndResource
14 default-font-family set_font
1 setmiterlimit
% /arrowlength 10 def
% /arrowwidth 5 def
%%EndProlog
%%Page: 1 1
%%PageBoundingBox: 36 379 648 414
%%PageOrientation: Portrait
gsave
35 378 613 36 boxprim clip newpath
36 379 translate
0 0 1 beginpage
0.9533 set_scale
0 0 translate 0 rotate
0.000 0.000 0.000 graphcolor
14.00 /Times-Roman set_font

%	0
gsave 10 dict begin
solid
18 18 18 18 ellipse_path
stroke
gsave 10 dict begin
18 19 moveto (0) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	1
gsave 10 dict begin
solid
158 18 18 18 ellipse_path
stroke
gsave 10 dict begin
158 19 moveto (1) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	0 -> 1
newpath 36 18 moveto
60 18 103 18 131 18 curveto
stroke
newpath 130 16 moveto
140 18 lineto
130 21 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
88 27 moveto (YOU'RE) 52 14.00 -0.50 alignedtext
end grestore

%	2
gsave 10 dict begin
solid
296 18 18 18 ellipse_path
stroke
gsave 10 dict begin
296 19 moveto (2) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	1 -> 2
newpath 176 18 moveto
199 18 241 18 269 18 curveto
stroke
newpath 268 16 moveto
278 18 lineto
268 21 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
227 27 moveto (FLYING) 51 14.00 -0.50 alignedtext
end grestore

%	3
gsave 10 dict begin
solid
470 18 18 18 ellipse_path
stroke
gsave 10 dict begin
470 19 moveto (3) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	2 -> 3
newpath 314 18 moveto
345 18 405 18 441 18 curveto
stroke
newpath 442 16 moveto
452 18 lineto
442 21 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
383 27 moveto (<FROMCITY>) 88 14.00 -0.50 alignedtext
end grestore

%	4
gsave 10 dict begin
solid
624 18 18 18 ellipse_path
stroke
gsave 10 dict begin
624 19 moveto (4) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	3 -> 4
newpath 488 18 moveto
515 18 565 18 596 18 curveto
stroke
newpath 596 16 moveto
606 18 lineto
596 21 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
547 27 moveto (<TOCITY>) 66 14.00 -0.50 alignedtext
end grestore
endpage
grestore
%%PageTrailer
%%EndPage: 1
%%Trailer
%%Pages: 1
end
restore
%%EOF

%%EndDocument
 @endspecial -95 353 a(\(b\))91 424 y @beginspecial 36
@llx 364 @lly 648 @urx 428 @ury 3089 @rwi @setspecial
%%BeginDocument: ./rec1.eps
%!PS-Adobe-2.0
%%Creator: dot version gviz1.5.1 (09-29-99)
%%For: (galley) Michel Galley,See potam,BL11333
%%Title: FSM
%%Pages: (atend)
%%BoundingBox: 36 364 648 428
%%EndComments
%%BeginProlog
save
/DotDict 200 dict def
DotDict begin

%%BeginResource: procset
/coord-font-family /Times-Roman def
/default-font-family /Times-Roman def
/coordfont coord-font-family findfont 8 scalefont def

/InvScaleFactor 1.0 def
/set_scale {
	dup 1 exch div /InvScaleFactor exch def
	dup scale
} bind def

% styles
/solid { } bind def
/dashed { [9 InvScaleFactor mul dup ] 0 setdash } bind def
/dotted { [1 InvScaleFactor mul 6 InvScaleFactor mul] 0 setdash } bind def
/invis {/fill {newpath} def /stroke {newpath} def /show {pop newpath} def} bind def
/bold { 2 setlinewidth } bind def
/filled { } bind def
/unfilled { } bind def
/rounded { } bind def
/diagonals { } bind def

% hooks for setting color 
/nodecolor { sethsbcolor } bind def
/edgecolor { sethsbcolor } bind def
/graphcolor { sethsbcolor } bind def
/nopcolor {pop pop pop} bind def

/beginpage {	% i j npages
	/npages exch def
	/j exch def
	/i exch def
	/str 10 string def
	npages 1 gt {
		gsave
			coordfont setfont
			0 0 moveto
			(\() show i str cvs show (,) show j str cvs show (\)) show
		grestore
	} if
} bind def

/set_font {
	findfont exch
	scalefont setfont
} def

% draw aligned label in bounding box aligned to current point
% alignfactor tells what fraction to place on the left.
% -.5 is centered.
/alignedtext {			% text labelwidth fontsz alignfactor
	/alignfactor exch def
	/fontsz exch def
	/width exch def
	/text exch def
	gsave
		% even if node or edge is dashed, don't paint text with dashes
		[] 0 setdash
		currentpoint newpath moveto
		text stringwidth pop
		alignfactor mul fontsz -.3 mul rmoveto
		text show
	grestore
} def

/boxprim {				% xcorner ycorner xsize ysize
		4 2 roll
		moveto
		2 copy
		exch 0 rlineto
		0 exch rlineto
		pop neg 0 rlineto
		closepath
} bind def

/ellipse_path {
	/ry exch def
	/rx exch def
	/y exch def
	/x exch def
	matrix currentmatrix
	newpath
	x y translate
	rx ry scale
	0 0 1 0 360 arc
	setmatrix
} bind def

/endpage { showpage } bind def

/layercolorseq
	[	% layer color sequence - darkest to lightest
		[0 0 0]
		[.2 .8 .8]
		[.4 .8 .8]
		[.6 .8 .8]
		[.8 .8 .8]
	]
def

/setlayer {/maxlayer exch def /curlayer exch def
	layercolorseq curlayer get
	aload pop sethsbcolor
	/nodecolor {nopcolor} def
	/edgecolor {nopcolor} def
	/graphcolor {nopcolor} def
} bind def

/onlayer { curlayer ne {invis} if } def

/onlayers {
	/myupper exch def
	/mylower exch def
	curlayer mylower lt
	curlayer myupper gt
	or
	{invis} if
} def

/curlayer 0 def

%%EndResource
14 default-font-family set_font
1 setmiterlimit
% /arrowlength 10 def
% /arrowwidth 5 def
%%EndProlog
%%Page: 1 1
%%PageBoundingBox: 36 364 648 428
%%PageOrientation: Portrait
gsave
35 363 613 65 boxprim clip newpath
36 364 translate
0 0 1 beginpage
0.7391 set_scale
0 0 translate 0 rotate
0.000 0.000 0.000 graphcolor
14.00 /Times-Roman set_font

%	0
gsave 10 dict begin
solid
18 44 18 18 ellipse_path
stroke
gsave 10 dict begin
18 45 moveto (0) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	1
gsave 10 dict begin
solid
158 44 18 18 ellipse_path
stroke
gsave 10 dict begin
158 45 moveto (1) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	0 -> 1
newpath 36 44 moveto
60 44 103 44 131 44 curveto
stroke
newpath 130 42 moveto
140 44 lineto
130 47 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
88 53 moveto (YOU'RE) 52 14.00 -0.50 alignedtext
end grestore

%	2
gsave 10 dict begin
solid
296 44 18 18 ellipse_path
stroke
gsave 10 dict begin
296 45 moveto (2) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	1 -> 2
newpath 176 44 moveto
199 44 241 44 269 44 curveto
stroke
newpath 268 42 moveto
278 44 lineto
268 47 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
227 53 moveto (FLYING) 51 14.00 -0.50 alignedtext
end grestore

%	3
gsave 10 dict begin
solid
422 44 18 18 ellipse_path
stroke
gsave 10 dict begin
422 45 moveto (3) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	2 -> 3
newpath 314 44 moveto
335 44 371 44 395 44 curveto
stroke
newpath 394 42 moveto
404 44 lineto
394 47 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
359 53 moveto (FROM) 39 14.00 -0.50 alignedtext
end grestore

%	4
gsave 10 dict begin
solid
556 44 18 18 ellipse_path
stroke
gsave 10 dict begin
556 45 moveto (4) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	3 -> 4
newpath 440 44 moveto
463 44 503 44 529 44 curveto
stroke
newpath 528 42 moveto
538 44 lineto
528 47 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
489 53 moveto (<CITY>) 48 14.00 -0.50 alignedtext
end grestore

%	5
gsave 10 dict begin
solid
676 44 18 18 ellipse_path
stroke
gsave 10 dict begin
676 45 moveto (5) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	4 -> 5
newpath 574 44 moveto
594 44 626 44 649 44 curveto
stroke
newpath 648 42 moveto
658 44 lineto
648 47 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
616 53 moveto (INTO) 33 14.00 -0.50 alignedtext
end grestore

%	4 -> 5
newpath 570 33 moveto
577 28 586 22 592 21 curveto
608 17 625 17 640 21 curveto
644 22 649 24 653 27 curveto
stroke
newpath 655 25 moveto
662 33 lineto
652 30 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
616 30 moveto (TO) 18 14.00 -0.50 alignedtext
end grestore

%	6
gsave 10 dict begin
solid
810 44 18 18 ellipse_path
stroke
gsave 10 dict begin
810 45 moveto (6) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	5 -> 6
newpath 694 44 moveto
717 44 757 44 783 44 curveto
stroke
newpath 782 42 moveto
792 44 lineto
782 47 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
743 53 moveto (<CITY>) 48 14.00 -0.50 alignedtext
end grestore
endpage
grestore
%%PageTrailer
%%EndPage: 1
%%Trailer
%%Pages: 1
end
restore
%%EOF

%%EndDocument
 @endspecial -95 1049 a(\(c\))91 1309 y @beginspecial
36 @llx 311 @lly 649 @urx 481 @ury 4535 @rwi @setspecial
%%BeginDocument: ./rec2cnt.eps
%!PS-Adobe-2.0
%%Creator: dot version gviz1.5.1 (09-29-99)
%%For: (galley) Michel Galley,See potam,BL11333
%%Title: FSM
%%Pages: (atend)
%%BoundingBox: 36 311 649 481
%%EndComments
%%BeginProlog
save
/DotDict 200 dict def
DotDict begin

%%BeginResource: procset
/coord-font-family /Times-Roman def
/default-font-family /Times-Roman def
/coordfont coord-font-family findfont 8 scalefont def

/InvScaleFactor 1.0 def
/set_scale {
	dup 1 exch div /InvScaleFactor exch def
	dup scale
} bind def

% styles
/solid { } bind def
/dashed { [9 InvScaleFactor mul dup ] 0 setdash } bind def
/dotted { [1 InvScaleFactor mul 6 InvScaleFactor mul] 0 setdash } bind def
/invis {/fill {newpath} def /stroke {newpath} def /show {pop newpath} def} bind def
/bold { 2 setlinewidth } bind def
/filled { } bind def
/unfilled { } bind def
/rounded { } bind def
/diagonals { } bind def

% hooks for setting color 
/nodecolor { sethsbcolor } bind def
/edgecolor { sethsbcolor } bind def
/graphcolor { sethsbcolor } bind def
/nopcolor {pop pop pop} bind def

/beginpage {	% i j npages
	/npages exch def
	/j exch def
	/i exch def
	/str 10 string def
	npages 1 gt {
		gsave
			coordfont setfont
			0 0 moveto
			(\() show i str cvs show (,) show j str cvs show (\)) show
		grestore
	} if
} bind def

/set_font {
	findfont exch
	scalefont setfont
} def

% draw aligned label in bounding box aligned to current point
% alignfactor tells what fraction to place on the left.
% -.5 is centered.
/alignedtext {			% text labelwidth fontsz alignfactor
	/alignfactor exch def
	/fontsz exch def
	/width exch def
	/text exch def
	gsave
		% even if node or edge is dashed, don't paint text with dashes
		[] 0 setdash
		currentpoint newpath moveto
		text stringwidth pop
		alignfactor mul fontsz -.3 mul rmoveto
		text show
	grestore
} def

/boxprim {				% xcorner ycorner xsize ysize
		4 2 roll
		moveto
		2 copy
		exch 0 rlineto
		0 exch rlineto
		pop neg 0 rlineto
		closepath
} bind def

/ellipse_path {
	/ry exch def
	/rx exch def
	/y exch def
	/x exch def
	matrix currentmatrix
	newpath
	x y translate
	rx ry scale
	0 0 1 0 360 arc
	setmatrix
} bind def

/endpage { showpage } bind def

/layercolorseq
	[	% layer color sequence - darkest to lightest
		[0 0 0]
		[.2 .8 .8]
		[.4 .8 .8]
		[.6 .8 .8]
		[.8 .8 .8]
	]
def

/setlayer {/maxlayer exch def /curlayer exch def
	layercolorseq curlayer get
	aload pop sethsbcolor
	/nodecolor {nopcolor} def
	/edgecolor {nopcolor} def
	/graphcolor {nopcolor} def
} bind def

/onlayer { curlayer ne {invis} if } def

/onlayers {
	/myupper exch def
	/mylower exch def
	curlayer mylower lt
	curlayer myupper gt
	or
	{invis} if
} def

/curlayer 0 def

%%EndResource
14 default-font-family set_font
1 setmiterlimit
% /arrowlength 10 def
% /arrowwidth 5 def
%%EndProlog
%%Page: 1 1
%%PageBoundingBox: 36 311 649 481
%%PageOrientation: Portrait
gsave
35 310 614 171 boxprim clip newpath
36 311 translate
0 0 1 beginpage
0.4842 set_scale
0 0 translate 0 rotate
0.000 0.000 0.000 graphcolor
14.00 /Times-Roman set_font

%	1
gsave 10 dict begin
invis
18 140 18 18 ellipse_path
stroke
gsave 10 dict begin
18 141 moveto (1) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	2
gsave 10 dict begin
solid
116 140 18 18 ellipse_path
stroke
gsave 10 dict begin
116 141 moveto (2) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	1 -> 2
newpath 36 140 moveto
51 140 72 140 89 140 curveto
stroke
newpath 88 138 moveto
98 140 lineto
88 143 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
67 149 moveto (...) 10 14.00 -0.50 alignedtext
end grestore

%	3
gsave 10 dict begin
solid
242 140 18 18 ellipse_path
stroke
gsave 10 dict begin
242 141 moveto (3) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	2 -> 3
newpath 134 140 moveto
155 140 191 140 215 140 curveto
stroke
newpath 214 138 moveto
224 140 lineto
214 143 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
179 149 moveto (FROM) 39 14.00 -0.50 alignedtext
end grestore

%	6
gsave 10 dict begin
solid
682 211 18 18 ellipse_path
stroke
gsave 10 dict begin
682 212 moveto (6) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	3 -> 6
newpath 245 158 moveto
249 181 259 218 278 228 curveto
390 278 525 245 646 228 curveto
647 227 651 225 657 223 curveto
stroke
newpath 656 221 moveto
666 219 lineto
658 225 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
484 262 moveto (<airport>) 52 14.00 -0.50 alignedtext
end grestore

%	3 -> 6
newpath 259 147 moveto
268 151 278 155 278 155 curveto
382 173 486 186 590 201 curveto
607 204 635 206 655 208 curveto
stroke
newpath 654 205 moveto
664 209 lineto
654 210 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
484 200 moveto (<city>) 36 14.00 -0.50 alignedtext
end grestore

%	4
gsave 10 dict begin
solid
554 127 18 18 ellipse_path
stroke
gsave 10 dict begin
554 128 moveto (4) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	3 -> 4
newpath 260 140 moveto
309 139 444 137 518 131 curveto
518 131 522 131 527 130 curveto
stroke
newpath 526 128 moveto
536 129 lineto
526 133 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
398 146 moveto (<airport>) 52 14.00 -0.50 alignedtext
end grestore

%	3 -> 4
newpath 259 135 moveto
285 128 335 115 364 111 curveto
410 104 488 115 528 123 curveto
stroke
newpath 526 120 moveto
536 124 lineto
526 125 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
398 122 moveto (<city>) 36 14.00 -0.50 alignedtext
end grestore

%	5
gsave 10 dict begin
solid
398 60 18 18 ellipse_path
stroke
gsave 10 dict begin
398 61 moveto (5) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	3 -> 5
newpath 248 123 moveto
255 108 266 87 278 81 curveto
301 69 343 64 371 62 curveto
stroke
newpath 370 60 moveto
380 61 lineto
370 65 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
312 90 moveto (<airport>) 52 14.00 -0.50 alignedtext
end grestore

%	3 -> 5
newpath 245 122 moveto
250 99 261 58 278 41 curveto
298 23 344 37 372 48 curveto
stroke
newpath 373 46 moveto
381 52 lineto
371 50 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
312 50 moveto (<city>) 36 14.00 -0.50 alignedtext
end grestore

%	7
gsave 10 dict begin
solid
802 211 18 18 ellipse_path
stroke
gsave 10 dict begin
802 212 moveto (7) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	6 -> 7
newpath 700 211 moveto
720 211 752 211 775 211 curveto
stroke
newpath 774 209 moveto
784 211 lineto
774 214 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
742 220 moveto (INTO) 33 14.00 -0.50 alignedtext
end grestore

%	6 -> 7
newpath 696 200 moveto
703 195 712 189 718 188 curveto
734 183 751 183 766 188 curveto
770 189 775 191 779 194 curveto
stroke
newpath 781 192 moveto
788 200 lineto
778 197 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
742 197 moveto (TO) 18 14.00 -0.50 alignedtext
end grestore

%	4 -> 6
newpath 570 135 moveto
591 146 626 164 646 178 curveto
652 181 658 187 665 193 curveto
stroke
newpath 665 189 moveto
670 198 lineto
661 193 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
618 187 moveto (<state>) 41 14.00 -0.50 alignedtext
end grestore

%	5 -> 4
newpath 416 61 moveto
443 63 492 69 518 81 curveto
526 84 536 95 542 105 curveto
stroke
newpath 543 101 moveto
545 111 lineto
538 103 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
484 90 moveto (IN) 14 14.00 -0.50 alignedtext
end grestore

%	10
gsave 10 dict begin
solid
1244 282 20 20 ellipse_path
stroke
gsave 10 dict begin
1244 283 moveto (10) 14 14.00 -0.50 alignedtext
end grestore
end grestore

%	7 -> 10
newpath 805 229 moveto
809 252 819 289 838 299 curveto
950 349 1085 315 1206 299 curveto
1207 299 1211 297 1217 294 curveto
stroke
newpath 1215 292 moveto
1225 290 lineto
1217 297 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
1044 333 moveto (<airport>) 52 14.00 -0.50 alignedtext
end grestore

%	7 -> 10
newpath 819 218 moveto
828 222 838 226 838 226 curveto
942 244 1046 257 1150 272 curveto
1160 273 1192 276 1217 279 curveto
stroke
newpath 1214 276 moveto
1224 280 lineto
1214 281 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
1044 271 moveto (<city>) 36 14.00 -0.50 alignedtext
end grestore

%	8
gsave 10 dict begin
solid
1114 198 18 18 ellipse_path
stroke
gsave 10 dict begin
1114 199 moveto (8) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	7 -> 8
newpath 820 211 moveto
869 210 1004 208 1078 202 curveto
1078 202 1082 202 1087 201 curveto
stroke
newpath 1086 199 moveto
1096 200 lineto
1086 204 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
958 217 moveto (<airport>) 52 14.00 -0.50 alignedtext
end grestore

%	7 -> 8
newpath 819 206 moveto
845 199 895 186 924 182 curveto
970 175 1048 186 1088 194 curveto
stroke
newpath 1086 191 moveto
1096 195 lineto
1086 196 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
958 193 moveto (<city>) 36 14.00 -0.50 alignedtext
end grestore

%	9
gsave 10 dict begin
solid
958 131 18 18 ellipse_path
stroke
gsave 10 dict begin
958 132 moveto (9) 7 14.00 -0.50 alignedtext
end grestore
end grestore

%	7 -> 9
newpath 808 194 moveto
815 179 826 158 838 152 curveto
861 140 903 135 931 133 curveto
stroke
newpath 930 131 moveto
940 132 lineto
930 136 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
872 161 moveto (<airport>) 52 14.00 -0.50 alignedtext
end grestore

%	7 -> 9
newpath 805 193 moveto
810 170 821 129 838 112 curveto
858 94 904 108 932 119 curveto
stroke
newpath 933 117 moveto
941 123 lineto
931 121 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
872 121 moveto (<city>) 36 14.00 -0.50 alignedtext
end grestore

%	8 -> 10
newpath 1130 206 moveto
1151 217 1186 235 1206 249 curveto
1211 252 1218 258 1225 263 curveto
stroke
newpath 1225 259 moveto
1230 268 lineto
1221 263 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
1178 258 moveto (<state>) 41 14.00 -0.50 alignedtext
end grestore

%	9 -> 8
newpath 976 132 moveto
1003 134 1052 140 1078 152 curveto
1086 155 1096 166 1102 176 curveto
stroke
newpath 1103 172 moveto
1105 182 lineto
1098 174 lineto
closepath
gsave 0 setgray stroke grestore fill
gsave 10 dict begin
1044 161 moveto (IN) 14 14.00 -0.50 alignedtext
end grestore
endpage
grestore
%%PageTrailer
%%EndPage: 1
%%Trailer
%%Pages: 1
end
restore
%%EOF

%%EndDocument
 @endspecial 138 1478 a(Figure)19 b(3:)k(The)c(FSA)f(representing)i(a)f
(single)g(phrasal)g(pattern)g(and)h(the)f(tw)o(o)g(\002rst)f(steps)h
(of)g(the)g(surf)o(ace)h(realization)f(mechanisms.)p
-120 1534 4016 4 v -70 1595 a Fe(phrasal)c(patter)o(n:)-70
1658 y Fd(:)c(:)g(:)26 b Fc(\003ying)15 b Fd(<)p Fc(FR)n(OMCITY)p
Fd(>)e(<)p Fc(FR)n(OMTIME)p Fd(>)g(<)p Fc(T)o(OCITY)p
Fd(>)g(<)p Fc(T)o(O)n(TIME)p Fd(>)-70 1784 y Fe(a:)18
b(no)d(n-gram)h(weights)-70 1847 y Fd(:)11 b(:)g(:)26
b Fc(\003ying)15 b(from)g(Ne)o(w)o(ark)g(at)f(7:20am)h(to)g(Boston)f
(arri)o(ving)h(in)g(Boston)f(at)g(8:00am)h Fd(:)c(:)g(:)-70
1931 y(:)g(:)g(:)26 b Fc(\003ying)15 b(Ne)o(w)o(ark)p
38 1954 333 3 v -26 x(E1)453 1931 y(at)f(7:20am)h(to)g(Boston)f(that)h
(arri)o(v)o(e)p 758 1943 415 3 v -26 x(E2)1255 1931 y(at)g(8:00am)g
Fd(:)c(:)g(:)-70 2022 y(:)g(:)g(:)26 b Fc(\003ying)15
b(from)g(Ne)o(w)o(ark)g(lea)o(ving)f(at)h(at)p 696 2034
99 3 v -25 x(E3)878 2022 y(7:20am)g(to)f(Boston)h(arri)o(ving)g(at)f
(8:00am)h Fd(:)c(:)g(:)-70 2106 y(:)g(:)g(:)26 b Fc(\003ying)15
b(from)g(Ne)o(w)o(ark)g(lea)o(ving)f(at)h(7:20am)f(to)h(Boston)f(arri)o
(ving)h(8:00am)p 1180 2129 372 3 v 1552 2080 a(E4)1635
2106 y Fd(:)c(:)g(:)-70 2239 y Fe(b:)18 b(with)e(n-gram)f(weights)-70
2303 y Fd(:)c(:)g(:)26 b Fc(\003ying)15 b(from)g(Ne)o(w)o(ark)g(at)f
(7:20am)h(arri)o(ving)g(in)g(Boston)f(at)g(8:00am)h Fd(:)c(:)g(:)-70
2382 y(:)g(:)g(:)26 b Fc(\003ying)15 b(from)g(Ne)o(w)o(ark)g(lea)o
(ving)f(at)h(7:20am)f(and)h(arri)o(ving)g(in)g(Boston)f(at)g(8:00am)h
Fd(:)c(:)g(:)-70 2462 y(:)g(:)g(:)26 b Fc(\003ying)15
b(from)g(Ne)o(w)o(ark)g(lea)o(ving)f(at)h(7:20am)f(and)h(arri)o(ving)g
(at)f(8:00am)h(in)g(Boston)f Fd(:)d(:)g(:)-70 2541 y(:)g(:)g(:)26
b Fc(\003ying)15 b(at)f(7:20)h(from)h(Ne)o(w)o(ark)e(and)g(arri)o(ving)
h(in)g(Boston)f(at)h(8:00am)g Fd(:)c(:)g(:)-120 2738
y Fp(Figure)25 b(4:)35 b(Sample)25 b(four)h(best)f(outputs)h(from)f
(rule-based)h(generator)-120 2825 y(\(a\))21 b(without)h
Fo(n)p Fp(-gram)h(weights,)f(and)h(\(b\))e(with)h Fo(n)p
Fp(-gram)g(weights.)32 b(Er)o(-)-120 2912 y(rors)19 b(are)g(mark)o(ed)h
(as)f(a)g(superscript)g(E)p Fo(n)p Fp(.)p -120 2969 1890
4 v 5 3069 a(While)g(anecdotally)j(our)e(system)h(seems)f(to)g(be)h
(getting)f(good)i(re-)-120 3156 y(sults,)16 b(e)n(v)n(aluating)h(a)e
(NLG)g(system)h(is,)g(unfortunately)-5 b(,)17 b(a)f(dif)n(\002cult)f
(task.)-120 3243 y(Quantitati)n(v)o(e)25 b(aspects)f(lik)o(e)h(speed)g
(and)g(memory)g(usage)g(are)g(easy)g(to)-120 3329 y(assess,)31
b(b)o(ut)e(it)f(is)h(more)g(dif)n(\002cult)g(to)f(appraise)i(qualitati)
n(v)o(e)f(aspects.)-120 3416 y(Ev)n(aluating)f(the)g(NLG)f(component)j
(of)d(a)h(spok)o(en)h(dialogue)g(system)-120 3503 y(is)e(e)n(v)o(en)i
(more)f(problematic,)j(since)d(it)f(is)g(hard)h(to)g(separate)g(it)g
(from)-120 3590 y(other)e(components)i(of)f(the)f(system,)i(especially)
e(the)h(te)o(xt-to-speech)-120 3676 y(engine)20 b([9].)j(In)18
b(future)h(w)o(ork,)g(we)g(hope)g(to)g(de)n(v)o(elop)h(an)f(e)o
(xperimental)-120 3763 y(paradigm)29 b(to)f(e)n(v)n(aluate)i(this)e
(system)g(against)g(our)h(older)m(,)i(template-)-120
3850 y(based)20 b(generator)l(.)500 4048 y Fq(7.)60 b(Conclusions)-120
4178 y Fp(W)-6 b(e)20 b(ha)o(v)o(e)g(proposed)i(a)f(ne)n(w)f
(application-independent)k(approach)e(for)-120 4265 y(natural)j
(language)i(generation)f(in)f(dialogue)h(systems)f(that)g(is)f(rob)o
(ust)-120 4352 y(against)f(missing)g(data)g(and)h(that)f(renders)g(the)
g(e)o(xpected)h(v)n(ariation)g(in)-120 4439 y(the)19
b(output.)5 4526 y(Statistical)k(methods)i(pro)o(vide)g(the)g(\003e)o
(xibility)f(to)g(deal)h(with)f(un-)-120 4613 y(derspeci\002ed)18
b(linguistic)f(kno)n(wledge,)i(while)e(semantic)g(rules)h(pro)o(vide)
-120 4700 y(some)25 b(control)h(as)f(to)f(what)h(phrases)h(should)g(or)
f(should)h(not)f(be)g(gen-)-120 4786 y(erated.)j(The)21
b(system)g(can)g(produce)h(sentences)g(in)e(a)h(fraction)f(of)h(real-)
-120 4873 y(time,)d(since)i(most)f(of)g(the)g(ungrammatical)h(e)o
(xpansions)g(are)f(automat-)-120 4960 y(ically)g(pruned)h(by)f(the)g
(stochastic)h(language)g(model.)5 5047 y(Our)33 b(natural)h(language)h
(generation)g(module)g(also)e(minimizes)-120 5134 y(de)n(v)o(elopment)
23 b(ef)n(fort:)28 b(the)22 b(stochastic)g(language)h(model)f(can)g
(accom-)-120 5221 y(modate)37 b(simple)f(semantic)h(rules)f(that)g(do)h
(not)f(require)h(linguistic)-120 5308 y(e)o(xpertise,)49
b(making)44 b(rules)g(f)o(ar)f(simpler)g(to)g(write)g(than)g(detailed)
-120 5394 y(syntactic)d(rules.)86 b(Furthermore,)45 b(the)40
b(rules)g(from)g(the)g(semantic)-120 5481 y(grammar)27
b(of)g(the)g(dialogue)h(system')l(s)g(parser)f(can)g(be)g(used)h(to)f
(seed)-120 5568 y(rule)d(construction.)41 b(W)-6 b(e)24
b(anticipate)g(that,)i(due)f(to)f(its)g(\003e)o(xibility)-5
b(,)24 b(the)2006 1633 y(system)19 b(will)f(be)h(easy)h(to)f(adapt)g
(for)g(other)g(domains.)2006 1760 y Fb(Ackno)o(wledgments)p
Fn(:)28 b(This)19 b(w)o(ork)g(w)o(as)g(partially)j(funded)e(by)g(D)m
(ARP)-6 b(A)19 b(under)2006 1846 y(the)k(auspices)h(of)e(the)h
(Communicator)h(project.)39 b(The)22 b(authors)h(w)o(ould)g(lik)o(e)h
(to)2006 1933 y(e)o(xpress)g(their)g(sincere)g(appreciation)j(to)c
(Chin-Hui)h(Lee,)g(Joe)f(Oli)n(v)o(e,)i(Gerald)2006 2020
y(Penn,)c(Jef)n(f)f(K)o(uo,)h(Andy)f(P)o(ar)o(gellis)i(and)f(Egbert)g
(Ammicht)f(for)g(man)o(y)h(helpful)2006 2107 y(discussions.)2652
2280 y Fq(8.)60 b(Refer)n(ences)2016 2399 y Fn([1])42
b(S.)12 b(Ax)o(elrod.)j(\223Natural)g(Language)g(Generation)i(in)c(the)
i(IBM)e(Flight)i(Infor)o(-)2135 2473 y(mation)h(System\224,)g(in)f
Fa(Pr)m(oc.)g(of)g(ANLP-N)n(AA)n(CL)n('2000,)g(pp.)f(21-26,)i(\(Seat-)
2135 2548 y(tle)o(,)i(W)-6 b(ashington\),)18 b(May)g(2000.)2016
2644 y Fn([2])42 b(E.)24 b(Ammicht,)k(A.)d(Potamianos,)30
b(and)c(E.)f(F)o(osler)o(-Lussier)m(,)k(\223)-5 b(Ambiguity)2135
2718 y(Representation)19 b(and)e(Resolution)h(in)e(Spok)o(en)h
(Dialogue)h(Systems,)-5 b(\224)16 b(sub-)2135 2793 y(mitted)i(to)f
Fa(EUR)m(OSPEECH)p Fn(,)e(\(Aalbor)o(g,)j(Denmark\),)f(2001.)2016
2889 y([3])42 b(J.)18 b(Bateman.)i(\223KPML)e(De)n(v)o(elopment)k(En)m
(vironment:)27 b(multilingual)22 b(lin-)2135 2963 y(guistic)i(resource)
h(de)n(v)o(elopment)h(and)e(sentence)h(generation.)-5
b(\224,)28 b Fa(German)2135 3038 y(National)17 b(Center)g(for)e
(Information)j(T)-6 b(ec)o(hnolo)o(gy)18 b(\(GDM\),)d(IPSI,)g(\(Darm-)
2135 3113 y(stadt,)i(Germany\),)g(J)n(an.)g(1997.)2016
3208 y Fn([4])42 b(S.)18 b(Busemann,)i(H.)f(Horacek.)h(\223)-5
b(A)19 b(Fle)o(xible)j(Shallo)n(w)e(Approach)h(to)f(T)-5
b(e)o(xt)2135 3283 y(Generation\224,)37 b(in)31 b Fa(Pr)m(oc.)f
(INLG'98,)k(pp.)c(238-247,)35 b(\(Nia)o(gar)o(a-on-the-)2135
3358 y(Lak)o(e)o(,)18 b(Canada\),)f(A)o(ug)o(.)f(1998.)2016
3453 y Fn([5])42 b(M.)18 b(Elhadad,)i(J.)d(Robin.)j(\223)-5
b(An)18 b(o)o(v)o(ervie)n(w)j(of)e(SURGE:)f(A)h(reusable)h(com-)2135
3528 y(prehensi)n(v)o(e)f(syntactic)h(realization)h(component.)-5
b(\224)19 b Fa(T)-6 b(ec)o(hnical)19 b(Report)e(96-)2135
3603 y(03,)e(Dept.)h(of)g(Mathematics)i(and)e(Computer)g(Science)o(,)j
(Ben)c(Gurion)h(Uni-)2135 3678 y(ver)o(sity)l(,)j(\(Beer)e(She)o(va,)h
(Isr)o(ael\),)f(1996.)2016 3773 y Fn([6])42 b(K.)16 b(Knight)i(and)f(V)
-9 b(.)17 b(Hatzi)n(v)n(assiloglou.)k(\223T)-5 b(w)o(o-Le)n(v)o(el,)18
b(Man)o(y-P)o(aths)h(Gen-)2135 3848 y(eration\224,)g(In)e
Fa(Pr)m(oc.)f(of)h(the)h(A)n(CL-95.)f(\(Boston,)f(Mass.\),)h(1995.)2016
3943 y Fn([7])42 b(S.)27 b(K)o(uno.)h(\223Functional)j(Sentence)g
(perspecti)n(v)o(e:)47 b(A)28 b(case)h(study)g(from)2135
4018 y(Japanese)19 b(and)g(English\224,)g Fa(Linguistic)i(Inquiry)l(,)e
(volume)h(3,)e(pp.)g(269-320,)2135 4093 y(1972.)2016
4188 y Fn([8])42 b(I.)26 b(Langkilde,)k(\223F)o(orest-Based)g
(Statistical)g(Sentence)f(Generation\224,)j(in)2135 4263
y Fa(Pr)m(oc.)16 b(ANLP-N)n(AA)n(CL)n('2000,)g(pp.)h(170-177,)g(May)h
(2000.)2016 4358 y Fn([9])42 b(A.H.)31 b(Oh)g(and)i(A.I.)e(Rudnick)o(y)
l(.)j(\223Stochastic)h(Language)f(Generation)2135 4433
y(for)24 b(Spok)o(en)h(Dialogue)h(Systems\224,)g(In)e
Fa(Pr)m(oc.)g(of)g(ANLP-N)n(AA)n(CL)n('2000,)2135 4508
y(pp.)16 b(27-32,)h(\(Seattle)o(,)j(W)-6 b(ashington\),)18
b(May)g(2000.)2006 4603 y Fn([10])42 b(A.)17 b(Potamianos,)j(E.)d
(Ammicht,)i(and)f(H.-K.)f(K)o(uo,)h(\223Dialogue)j(manage-)2135
4678 y(ment)k(in)f(the)i(Bell)f(Labs)g(communicator)i(system,)-5
b(\224)26 b(in)f Fa(Internat.)h(Conf)o(.)2135 4753 y(Speec)o(h)18
b(Langua)o(g)o(e)h(Pr)m(ocessing)p Fn(,)f(\(Beijing,)h(China\),)f(Oct.)
f(2000.)2006 4848 y([11])42 b(A.)13 b(Potamianos)i(and)g(H.-K.)d(K)o
(uo,)i(\223Speech)i(understanding)h(using)d(\002nite)2135
4923 y(state)j(transducers,)-5 b(\224)18 b(in)e Fa(Internat.)h(Conf)o
(.)g(Speec)o(h)g(Langua)o(g)o(e)h(Pr)m(ocessing)p Fn(,)2135
4998 y(\(Beijing,)h(China\),)f(Oct.)f(2000.)2006 5093
y([12])42 b(M.)13 b(Rile)o(y)l(,)i(F)-5 b(.)13 b(Pereira,)j(\223W)-5
b(eighted-\002nite)17 b(automata)f(tools)e(with)h(applica-)2135
5168 y(tions)i(to)h(speech)g(and)f(language)j(processing,)-5
b(\224)19 b(T)-5 b(echnical)20 b(report,)d(A)-7 b(T&T)2135
5243 y(Bell)18 b(Laboratories,)h(1995.)2006 5350 y([13])42
b(A.)d(Stent.)h(\223Content)i(Planning)f(and)f(Generation)i(in)d
(Continuous-)2135 5437 y(Speech)20 b(Spok)o(en)g(Dialog)g(Systems\224,)
f(in)g Fa(Pr)m(oc.)f(of)h(the)h(KI'99)f(workshop,)2135
5524 y(\224May)e(I)g(Speak)h(F)l(r)n(eely?\224,)g(\(Bonn,)e(Germany\),)
i(Sep.)f(1999.)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
